<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [A610\G30-CTR.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image A610\G30-CTR.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Aug 07 11:56:55 2021
<BR><P>
<H3>Maximum Stack Usage =        344 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; usart11_Recdata_Handling &rArr; receiver_data_from_A650 &rArr; ab_set_display &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel4_5_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1c]">SPI2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[15]">TIM14_IRQHandler</a> from stm32f0xx_it.o(i.TIM14_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[16]">TIM15_IRQHandler</a> from stm32f0xx_it.o(i.TIM15_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[17]">TIM16_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[18]">TIM17_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from stm32f0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from stm32f0xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1d]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1e]">USART2_IRQHandler</a> from stm32f0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[22]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[23]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[124]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[125]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[126]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[127]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[128]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_speed_calculat
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_time_calibration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_tatol_time_dis
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Launch_Cache
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart11_Recdata_Handling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Send_Dma
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_the_data
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_GetData_From_BLE
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[120]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_time_cout
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_speed_calculat
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_time_cout
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_speed_calculat
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_speed_calculat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mode_speed_init
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_speed_calculat
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_battery_dis
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[103]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_battery_dis
</UL>

<P><STRONG><a name="[12f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_speed_calculat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mode_speed_init
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_speed_calculat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mode_speed_init
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_battery_dis
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_battery_dis
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_time_dis
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_time_cout
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_time_cout
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[131]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[132]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[133]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[29]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[32]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[31]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[135]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetCalibrationFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_function_init
</UL>

<P><STRONG><a name="[40]"></a>A_d_c_int</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(i.A_d_c_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = A_d_c_int &rArr; Adc_Gpio_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_int
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_function_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>Adc_Gpio_init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, adc.o(i.Adc_Gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Adc_Gpio_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
</UL>

<P><STRONG><a name="[42]"></a>Adc_function_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, adc.o(i.Adc_function_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adc_function_init &rArr; ADC_GetCalibrationFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
</UL>

<P><STRONG><a name="[46]"></a>Address_set</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, oled.o(i.Address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Dis
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_frame_display
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P16x16Str
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[49]"></a>Charging_Dis</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, oled.o(i.Charging_Dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Charging_Dis &rArr; LCD_Fill &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
</UL>

<P><STRONG><a name="[b5]"></a>Check_Buffer_Empty</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, config.o(i.Check_Buffer_Empty))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_init_from_A650
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_press_ok
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_move
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_display
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_mode_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_time_OK
</UL>

<P><STRONG><a name="[4c]"></a>Check_String</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, oled.o(i.Check_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Check_String
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_set_display
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_display
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTDis_Selet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tatol_hours_time_dis
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_shoot_dis
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_display
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_display
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_disp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_flag_dis
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_return_display
</UL>

<P><STRONG><a name="[4d]"></a>Check_String_Size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, oled.o(i.Check_String_Size))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>

<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel4_5_IRQHandler &rArr; Usart22_Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Device_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio.o(i.Device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Device_init &rArr; Spi_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutter_gpio_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_gpio_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2300_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32f030_pf_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>Dma_SendIRQ_Dispose</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(i.Dma_SendIRQ_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Tx_Complete
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableIT_TC
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[43]"></a>Dma_int</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, adc.o(i.Dma_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dma_int
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
</UL>

<P><STRONG><a name="[97]"></a>Enter_Sleep_Mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, low_power.o(i.Enter_Sleep_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Out_And_Enter_Stop_Mode
</UL>

<P><STRONG><a name="[5b]"></a>FLASH_ErasePage</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_OnePage
</UL>

<P><STRONG><a name="[5f]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[e9]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protect
</UL>

<P><STRONG><a name="[ea]"></a>FLASH_OB_Launch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash.o(i.FLASH_OB_Launch))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protect
</UL>

<P><STRONG><a name="[e8]"></a>FLASH_OB_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(i.FLASH_OB_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protect
</UL>

<P><STRONG><a name="[5d]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, flash.o(i.FLASH_OB_RDPConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_OB_RDPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protect
</UL>

<P><STRONG><a name="[e7]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash.o(i.FLASH_OB_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protect
</UL>

<P><STRONG><a name="[5e]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword
</UL>

<P><STRONG><a name="[e6]"></a>FLASH_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protect
</UL>

<P><STRONG><a name="[5c]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[60]"></a>Fast_time_dis</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, orbital.o(i.Fast_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Fast_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[6b]"></a>Feed_IWDG</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.Feed_IWDG))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_holfword
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_OnePage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_frame_display
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P16x16Str
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint111
</UL>

<P><STRONG><a name="[64]"></a>GPIO_OUT_init</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, gpio.o(i.GPIO_OUT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutter_gpio_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_gpio_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2300_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32f030_pf_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_init
</UL>

<P><STRONG><a name="[65]"></a>Gpio_confi_input</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, keyscan.o(i.Gpio_confi_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Gpio_confi_input &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_pin_init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Key_To_ble_Pair</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble.o(i.Key_To_ble_Pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Key_To_ble_Pair &rArr; scan_device &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>LCD_Clear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, oled.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Clear &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint111
</UL>

<P><STRONG><a name="[4a]"></a>LCD_Fill</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, oled.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_Fill &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_display
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Dis
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_motor_battery_dis_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTDis_Selet
</UL>

<P><STRONG><a name="[6c]"></a>LCD_P16x16Str</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, oled.o(i.LCD_P16x16Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint111
</UL>

<P><STRONG><a name="[6d]"></a>LCD_P8x16Str</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, oled.o(i.LCD_P8x16Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint111
</UL>

<P><STRONG><a name="[4b]"></a>LCD_WR_DATA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oled.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Dis
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_frame_display
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P16x16Str
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[48]"></a>LCD_WR_DATA8</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled.o(i.LCD_WR_DATA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA8
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>

<P><STRONG><a name="[47]"></a>LCD_WR_REG</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>

<P><STRONG><a name="[44]"></a>LL_GPIO_Init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart11_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Gpio_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_confi_input
</UL>

<P><STRONG><a name="[6f]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[73]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[89]"></a>LL_SPI_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f0xx_ll_spi.o(i.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_init
</UL>

<P><STRONG><a name="[7d]"></a>LL_TIM_Init</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f0xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
</UL>

<P><STRONG><a name="[74]"></a>LL_USART_Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32f0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart11_Init
</UL>

<P><STRONG><a name="[76]"></a>Launch_Cache</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart.o(i.Launch_Cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Launch_Cache
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Send_Dma
</UL>

<P><STRONG><a name="[78]"></a>Lcd_Init</STRONG> (Thumb, 544 bytes, Stack size 16 bytes, oled.o(i.Lcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Lcd_Init &rArr; The_motor_battery_dis_init &rArr; battery_data_display &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_frame_display
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_motor_battery_dis_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>Led_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.Led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Led_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[f0]"></a>LowBattery_wakeup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, low_power.o(i.LowBattery_wakeup))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[7e]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MX_USART1_UART_Init &rArr; Usart11_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart11_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Oled_EnlPrint</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, oled.o(i.Oled_EnlPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P16x16Str
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_set_display
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_dir_display
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tatol_hours_time_dis
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_shoot_dis
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_display
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_start_stop_dis
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_back_dis
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_display
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_disp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_flag_dis
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fps_amt_display
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_return_display
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DownCount
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Percentage_Dis
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_time_dis
</UL>

<P><STRONG><a name="[82]"></a>Oled_EnlPrint111</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, oled.o(i.Oled_EnlPrint111))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Oled_EnlPrint111 &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P16x16Str
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_display
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTDis_Selet
</UL>

<P><STRONG><a name="[83]"></a>Open_Send_Dma</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uart.o(i.Open_Send_Dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Open_Send_Dma &rArr; Launch_Cache
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Tx_Complete
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Launch_Cache
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableIT_TC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>Pairing_time</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pair.o(i.Pairing_time))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[72]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[70]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[88]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[ab]"></a>Reset_RX_Complete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.Reset_RX_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_usart_RX
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_GetData_From_BLE
</UL>

<P><STRONG><a name="[5a]"></a>Reset_Tx_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.Reset_Tx_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[92]"></a>Resolution_Configure</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gpio.o(i.Resolution_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2300_Init
</UL>

<P><STRONG><a name="[57]"></a>STM32f030_pf_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gpio.o(i.STM32f030_pf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = STM32f030_pf_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>Set_Tx_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.Set_Tx_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Send_Dma
</UL>

<P><STRONG><a name="[55]"></a>Spi_init</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, gpio.o(i.Spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Spi_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[6e]"></a>Spi_write_data</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.Spi_write_data))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>SystemClock_Config</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>TFTDis_Selet</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, oled.o(i.TFTDis_Selet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TFTDis_Selet &rArr; Oled_EnlPrint111 &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint111
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_page
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_screen
</UL>

<P><STRONG><a name="[15]"></a>TIM14_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM14_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_count
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_interval_count
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_cycle_count
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_cout
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_time_out_countdown
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pairing_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM15_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.TIM15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TMC2300_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.TMC2300_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TMC2300_Init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolution_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[93]"></a>Task_Percentage_Dis</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, orbital.o(i.Task_Percentage_Dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Task_Percentage_Dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_time_OK
</UL>

<P><STRONG><a name="[7a]"></a>The_motor_battery_dis_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled.o(i.The_motor_battery_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = The_motor_battery_dis_init &rArr; battery_data_display &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_frame_display
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
</UL>

<P><STRONG><a name="[95]"></a>Time_DownCount</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, orbital.o(i.Time_DownCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Time_DownCount &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[96]"></a>Time_Out_And_Enter_Stop_Mode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, low_power.o(i.Time_Out_And_Enter_Stop_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Time_Out_And_Enter_Stop_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Sleep_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>USART1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; usart1_receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receiver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; usart22_read_byte &rArr; Usart22_Receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_read_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Usart22_Dma_SendIRQ_Dispose</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.Usart22_Dma_SendIRQ_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart22_Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Reset_Tx_Complete
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableIT_TC
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>Usart22_Receiver</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.Usart22_Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart22_Receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_GetDataLength
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_read_byte
</UL>

<P><STRONG><a name="[a6]"></a>Usart22_Reset_Tx_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.Usart22_Reset_Tx_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[a9]"></a>Usart_GetData_From_BLE</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble.o(i.Usart_GetData_From_BLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart_GetData_From_BLE
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_RX_Complete
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RX_Complete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
</UL>

<P><STRONG><a name="[ae]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[136]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[62]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tatol_hours_time_dis
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_display
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_back_dis
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_display
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fps_amt_display
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DownCount
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Percentage_Dis
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_time_dis
</UL>

<P><STRONG><a name="[137]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[138]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3d]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d2]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motor_dri.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_shift
</UL>

<P><STRONG><a name="[139]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[13a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b4]"></a>ab_set_display</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ab_set.o(i.ab_set_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ab_set_display &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[b8]"></a>ab_set_move</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ab_set.o(i.ab_set_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ab_set_move &rArr; check_sum_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[b9]"></a>ab_set_press_ok</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ab_set.o(i.ab_set_press_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ab_set_press_ok &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[90]"></a>active_time_out_countdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, low_power.o(i.active_time_out_countdown))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>adc_cout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.adc_cout))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>adv_time_OK</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, orbital.o(i.adv_time_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = adv_time_OK &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Percentage_Dis
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[bf]"></a>all_page_param_dis</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, orbital.o(i.all_page_param_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = all_page_param_dis &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[c1]"></a>auto_mode_speed_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, orbital.o(i.auto_mode_speed_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = auto_mode_speed_init &rArr; duration_time_calibration &rArr; secondes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_speed_calculat
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_time_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
</UL>

<P><STRONG><a name="[c6]"></a>auto_return_display</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, orbital.o(i.auto_return_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = auto_return_display &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[94]"></a>battery_data_display</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, oled.o(i.battery_data_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = battery_data_display &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_motor_battery_dis_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_battery_dis
</UL>

<P><STRONG><a name="[c8]"></a>battery_display</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, oled.o(i.battery_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = battery_display &rArr; LCD_Fill &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_battery_dis
</UL>

<P><STRONG><a name="[79]"></a>battery_frame_display</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, oled.o(i.battery_frame_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = battery_frame_display &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_motor_battery_dis_init
</UL>

<P><STRONG><a name="[b6]"></a>change_page</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, orbital.o(i.change_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_screen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mode_speed_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_press_ok
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_display
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_main_page_OK
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_main_page_ok
</UL>

<P><STRONG><a name="[b7]"></a>check_sum_add</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ab_set.o(i.check_sum_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_init_from_A650
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_press_ok
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_move
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_display
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_mode_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_time_OK
</UL>

<P><STRONG><a name="[ca]"></a>config_page_ok</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, config.o(i.config_page_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = config_page_ok &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[cc]"></a>cursor_count</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, config.o(i.cursor_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = cursor_count &rArr; cursor_display &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_shift
</UL>

<P><STRONG><a name="[cd]"></a>cursor_display</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, config.o(i.cursor_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = cursor_display &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_page
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_count
</UL>

<P><STRONG><a name="[cf]"></a>cursor_glint</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, orbital.o(i.cursor_glint))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cursor_glint &rArr; durationORdelay_time_dis &rArr; minutes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_page
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;durationORdelay_time_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
</UL>

<P><STRONG><a name="[d1]"></a>cursor_shift</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, orbital.o(i.cursor_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cursor_shift &rArr; cursor_count &rArr; cursor_display &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_count
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[121]"></a>data_count</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, orbital.o(i.data_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_count
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_speed_adjust
</UL>

<P><STRONG><a name="[d3]"></a>delay_main_page_ok</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, orbital.o(i.delay_main_page_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = delay_main_page_ok &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[d5]"></a>delay_mode_main</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, orbital.o(i.delay_mode_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = delay_mode_main &rArr; cursor_glint &rArr; durationORdelay_time_dis &rArr; minutes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_cofirm
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_display
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_start
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_glint
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Percentage_Dis
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>delay_mode_tatol_time_dis</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, orbital.o(i.delay_mode_tatol_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = delay_mode_tatol_time_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>

<P><STRONG><a name="[dc]"></a>delay_page_ok</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, orbital.o(i.delay_page_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = delay_page_ok &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_direction_change
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_start
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_adjust
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[df]"></a>delay_page_return</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, orbital.o(i.delay_page_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delay_page_return &rArr; get_data_form_A650 &rArr; check_sum_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
</UL>

<P><STRONG><a name="[d0]"></a>durationORdelay_time_dis</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, orbital.o(i.durationORdelay_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = durationORdelay_time_dis &rArr; minutes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_glint
</UL>

<P><STRONG><a name="[c4]"></a>duration_time_calibration</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, orbital.o(i.duration_time_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = duration_time_calibration &rArr; secondes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mode_speed_init
</UL>

<P><STRONG><a name="[e0]"></a>dynamic_speed_calculat</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, motor_dri.o(i.dynamic_speed_calculat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dynamic_speed_calculat &rArr; motor_speed_adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_calculat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_speed_adjust
</UL>

<P><STRONG><a name="[e3]"></a>erase_flash_OnePage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(i.erase_flash_OnePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>

<P><STRONG><a name="[d6]"></a>factory_cofirm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config.o(i.factory_cofirm))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
</UL>

<P><STRONG><a name="[e4]"></a>factory_set_display</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, config.o(i.factory_set_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = factory_set_display &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[e5]"></a>flash_read_protect</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, flash.o(i.flash_read_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = flash_read_protect &rArr; FLASH_OB_RDPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Unlock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Lock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
</UL>

<P><STRONG><a name="[eb]"></a>fps_amt_display</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, orbital.o(i.fps_amt_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fps_amt_display &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[d4]"></a>get_data_form_A650</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, orbital.o(i.get_data_form_A650))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_data_form_A650 &rArr; check_sum_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_return
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_main_page_OK
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_main_page_ok
</UL>

<P><STRONG><a name="[ec]"></a>get_init_from_A650</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, orbital.o(i.get_init_from_A650))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_init_from_A650 &rArr; check_sum_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>hours_time_dis</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, orbital.o(i.hours_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hours_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;durationORdelay_time_dis
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_time_OK
</UL>

<P><STRONG><a name="[110]"></a>if_write_flash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash.o(i.if_write_flash))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_speed_adjust
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>

<P><STRONG><a name="[10a]"></a>inverse_get_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, orbital.o(i.inverse_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
</UL>

<P><STRONG><a name="[ed]"></a>key_Handle</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, keyscan.o(i.key_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[ef]"></a>keyscan</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, keyscan.o(i.keyscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = keyscan &rArr; press_key_continue &rArr; param_adjust &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_move
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowBattery_wakeup
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_Handle
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue_if
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_mode_start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>keyscan_pin_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, keyscan.o(i.keyscan_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = keyscan_pin_init &rArr; Gpio_confi_input &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_confi_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>language_display</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config.o(i.language_display))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = main &rArr; usart11_Recdata_Handling &rArr; receiver_data_from_A650 &rArr; ab_set_display &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart11_Recdata_Handling
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_active_time_out
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_pin_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_init_from_A650
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Out_And_Enter_Stop_Mode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Send_Dma
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_To_ble_Pair
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ff]"></a>main_page_ok</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, config.o(i.main_page_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main_page_ok &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[100]"></a>manual_flag_dis</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, orbital.o(i.manual_flag_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = manual_flag_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[f2]"></a>manual_mode_start</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, orbital.o(i.manual_mode_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = manual_mode_start &rArr; video_dir_display &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_dir_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[bd]"></a>minutes_time_dis</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, orbital.o(i.minutes_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = minutes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;durationORdelay_time_dis
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_time_OK
</UL>

<P><STRONG><a name="[102]"></a>motor_battery_dis</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, oled.o(i.motor_battery_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = motor_battery_dis &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_display
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[dd]"></a>motor_direction_change</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio.o(i.motor_direction_change))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
</UL>

<P><STRONG><a name="[fa]"></a>motor_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motor_dri.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = motor_init &rArr; para_read_from_flash &rArr; write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameter_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_speed_calculat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>motor_speed_adjust</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, motor_dri.o(i.motor_speed_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motor_speed_adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_calculat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_speed_calculat
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_speed_adjust
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
</UL>

<P><STRONG><a name="[e2]"></a>motor_speed_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motor_dri.o(i.motor_speed_set))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_adjust
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_speed_calculat
</UL>

<P><STRONG><a name="[d7]"></a>motor_start</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, motor_dri.o(i.motor_start))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
</UL>

<P><STRONG><a name="[d9]"></a>motor_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motor_dri.o(i.motor_stop))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_return
</UL>

<P><STRONG><a name="[c5]"></a>move_speed_calculat</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, orbital.o(i.move_speed_calculat))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = move_speed_calculat &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mode_speed_init
</UL>

<P><STRONG><a name="[106]"></a>move_time_cout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, orbital.o(i.move_time_cout))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = move_time_cout &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>

<P><STRONG><a name="[108]"></a>move_to_disp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, orbital.o(i.move_to_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = move_to_disp &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[54]"></a>oled_gpio_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.oled_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = oled_gpio_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[ce]"></a>oled_print_page</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, oled.o(i.oled_print_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = oled_print_page &rArr; TFTDis_Selet &rArr; Oled_EnlPrint111 &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTDis_Selet
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_display
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_glint
</UL>

<P><STRONG><a name="[c9]"></a>oled_print_screen</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, oled.o(i.oled_print_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTDis_Selet
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
</UL>

<P><STRONG><a name="[f6]"></a>page_return</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, keyscan.o(i.page_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = page_return &rArr; page_return_adjust &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[109]"></a>page_return_adjust</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, config.o(i.page_return_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = page_return_adjust &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_return
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return
</UL>

<P><STRONG><a name="[10f]"></a>para_count</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, orbital.o(i.para_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = para_count
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>

<P><STRONG><a name="[10c]"></a>para_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, motor_dri.o(i.para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
</UL>

<P><STRONG><a name="[104]"></a>para_read_from_flash</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, flash.o(i.para_read_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = para_read_from_flash &rArr; write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_holfword
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[f1]"></a>param_adjust</STRONG> (Thumb, 2148 bytes, Stack size 24 bytes, orbital.o(i.param_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = param_adjust &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_dir_display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_speed_adjust
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_count
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_time_cout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_tatol_time_dis
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue
</UL>

<P><STRONG><a name="[bb]"></a>param_display</STRONG> (Thumb, 534 bytes, Stack size 16 bytes, orbital.o(i.param_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;language_display
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_set_display
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_dir_display
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_display
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tatol_hours_time_dis
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_shoot_dis
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_display
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_start_stop_dis
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_back_dis
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_display
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_disp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_flag_dis
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fps_amt_display
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_return_display
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DownCount
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Percentage_Dis
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_time_dis
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_display
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_screen
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_tatol_time_dis
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_page_param_dis
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_time_OK
</UL>

<P><STRONG><a name="[105]"></a>parameter_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, orbital.o(i.parameter_init))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[d8]"></a>pix_amt_compara_dis</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, orbital.o(i.pix_amt_compara_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pix_amt_compara_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[114]"></a>pix_amt_display</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, orbital.o(i.pix_amt_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pix_amt_display &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[116]"></a>play_back_dis</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, orbital.o(i.play_back_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[f4]"></a>press_OK_function</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, keyscan.o(i.press_OK_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = press_OK_function &rArr; main_page_ok &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_press_ok
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_main_page_OK
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_main_page_ok
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_time_OK
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[f5]"></a>press_key_continue</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, keyscan.o(i.press_key_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = press_key_continue &rArr; param_adjust &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_addend_data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[f3]"></a>press_key_continue_if</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, orbital.o(i.press_key_continue_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = press_key_continue_if
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_addend_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[91]"></a>pulse_count</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ab_set.o(i.pulse_count))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>read_ADC_value</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, adc.o(i.read_ADC_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = read_ADC_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_display
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Dis
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>read_flash_holfword</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, flash.o(i.read_flash_holfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_flash_holfword
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
</UL>

<P><STRONG><a name="[11b]"></a>receiver_data_from_A650</STRONG> (Thumb, 680 bytes, Stack size 72 bytes, orbital.o(i.receiver_data_from_A650))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = receiver_data_from_A650 &rArr; ab_set_display &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_display
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_battery_dis
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_page_param_dis
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DownCount
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Percentage_Dis
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart11_Recdata_Handling
</UL>

<P><STRONG><a name="[11c]"></a>reset_usart_RX</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble.o(i.reset_usart_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_usart_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RX_Complete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
</UL>

<P><STRONG><a name="[aa]"></a>return_RX_Complete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.return_RX_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_GetData_From_BLE
</UL>

<P><STRONG><a name="[8d]"></a>scan_cycle_count</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, keyscan.o(i.scan_cycle_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>scan_device</STRONG> (Thumb, 508 bytes, Stack size 112 bytes, ble.o(i.scan_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = scan_device &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_the_data
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_lengt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_usart_RX
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_GetData_From_BLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_To_ble_Pair
</UL>

<P><STRONG><a name="[be]"></a>secondes_time_dis</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, orbital.o(i.secondes_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = secondes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_time_calibration
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;durationORdelay_time_dis
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_time_OK
</UL>

<P><STRONG><a name="[8e]"></a>send_interval_count</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(i.send_interval_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>set_active_time_out</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, low_power.o(i.set_active_time_out))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>set_addend_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, orbital.o(i.set_addend_data))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue_if
</UL>

<P><STRONG><a name="[53]"></a>shutter_gpio_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(i.shutter_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = shutter_gpio_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[c0]"></a>single_cursor_dis</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, orbital.o(i.single_cursor_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTDis_Selet
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_display
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_screen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_page_param_dis
</UL>

<P><STRONG><a name="[112]"></a>slow_start_stop_dis</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, orbital.o(i.slow_start_stop_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = slow_start_stop_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[e1]"></a>speed_calculat</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motor_dri.o(i.speed_calculat))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_adjust
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_speed_calculat
</UL>

<P><STRONG><a name="[111]"></a>speed_display</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, orbital.o(i.speed_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = speed_display &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_speed_adjust
</UL>

<P><STRONG><a name="[da]"></a>status_display</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, orbital.o(i.status_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = status_display &rArr; Oled_EnlPrint111 &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint111
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[115]"></a>stop_shoot_dis</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, orbital.o(i.stop_shoot_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = stop_shoot_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[11e]"></a>string_lengt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble.o(i.string_lengt))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
</UL>

<P><STRONG><a name="[113]"></a>tatol_hours_time_dis</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, orbital.o(i.tatol_hours_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tatol_hours_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[8c]"></a>time_count</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, motor_dri.o(i.time_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>time_delay_ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_dri.o(i.time_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_To_ble_Pair
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
</UL>

<P><STRONG><a name="[fe]"></a>usart11_Recdata_Handling</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(i.usart11_Recdata_Handling))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = usart11_Recdata_Handling &rArr; receiver_data_from_A650 &rArr; ab_set_display &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>usart1_receiver</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.usart1_receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart1_receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_GetDataLength
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>usart22_read_byte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart.o(i.usart22_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart22_read_byte &rArr; Usart22_Receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>usart_set_the_data</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble.o(i.usart_set_the_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_set_the_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_device
</UL>

<P><STRONG><a name="[101]"></a>video_dir_display</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, orbital.o(i.video_dir_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = video_dir_display &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_mode_start
</UL>

<P><STRONG><a name="[118]"></a>video_main_page_OK</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, orbital.o(i.video_main_page_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = video_main_page_OK &rArr; change_page &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[119]"></a>video_page_OK</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, orbital.o(i.video_page_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = video_page_OK &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[10e]"></a>video_speed_adjust</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, orbital.o(i.video_speed_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = video_speed_adjust &rArr; speed_display &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_adjust
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_speed_calculat
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_display
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_count
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>

<P><STRONG><a name="[fb]"></a>wait_for_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, motor_dri.o(i.wait_for_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wait_for_init &rArr; oled_print_screen &rArr; single_cursor_dis &rArr; param_display &rArr; play_back_dis &rArr; Oled_EnlPrint &rArr; LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_screen
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>wifi_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gpio.o(i.wifi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = wifi_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[cb]"></a>write_flash_active</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flash.o(i.write_flash_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_flash_active &rArr; write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
</UL>

<P><STRONG><a name="[122]"></a>write_flash_holfword</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, flash.o(i.write_flash_holfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>

<P><STRONG><a name="[10d]"></a>write_flash_holfword_buffer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, flash.o(i.write_flash_holfword_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_OnePage
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f9]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>MX_TIM14_Init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, main.o(i.MX_TIM14_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MX_TIM14_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
</UL>

<P><STRONG><a name="[9c]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[59]"></a>LL_DMA_DisableChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_DisableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receiver
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[58]"></a>LL_DMA_DisableIT_TC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_DisableIT_TC))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[87]"></a>LL_DMA_EnableChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart11_Recdata_Handling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Send_Dma
</UL>

<P><STRONG><a name="[86]"></a>LL_DMA_EnableIT_TC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_EnableIT_TC))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Send_Dma
</UL>

<P><STRONG><a name="[a8]"></a>LL_DMA_GetDataLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_GetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receiver
</UL>

<P><STRONG><a name="[a0]"></a>LL_DMA_SetChannelPriorityLevel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetChannelPriorityLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[85]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_SetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart11_Recdata_Handling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Send_Dma
</UL>

<P><STRONG><a name="[9f]"></a>LL_DMA_SetDataTransferDirection</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetDataTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetDataTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[9e]"></a>LL_DMA_SetMemoryAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_SetMemoryAddress))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[a2]"></a>LL_DMA_SetMemoryIncMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetMemoryIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemoryIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[a4]"></a>LL_DMA_SetMemorySize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetMemorySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemorySize
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[a5]"></a>LL_DMA_SetMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[9d]"></a>LL_DMA_SetPeriphAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_SetPeriphAddress))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[a1]"></a>LL_DMA_SetPeriphIncMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetPeriphIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[a3]"></a>LL_DMA_SetPeriphSize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetPeriphSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphSize
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[9b]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart11_Init
</UL>

<P><STRONG><a name="[9a]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Dma_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart11_Init
</UL>

<P><STRONG><a name="[7f]"></a>Usart11_Init</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, uart.o(i.Usart11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Usart11_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[80]"></a>Usart1_Receiver_Dma_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, uart.o(i.Usart1_Receiver_Dma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart1_Receiver_Dma_Init &rArr; LL_DMA_SetPeriphSize
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[81]"></a>Usart1_Send_Dma_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, uart.o(i.Usart1_Send_Dma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart1_Send_Dma_Init &rArr; LL_DMA_SetPeriphSize
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[ee]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, keyscan.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_Handle
</UL>

<P><STRONG><a name="[ad]"></a>LL_DMA_EnableChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble.o(i.LL_DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_the_data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_usart_RX
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_GetData_From_BLE
</UL>

<P><STRONG><a name="[ac]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble.o(i.LL_DMA_SetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_the_data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_usart_RX
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_GetData_From_BLE
</UL>

<P><STRONG><a name="[67]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_To_ble_Pair
</UL>

<P><STRONG><a name="[b0]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[af]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[b3]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b2]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
