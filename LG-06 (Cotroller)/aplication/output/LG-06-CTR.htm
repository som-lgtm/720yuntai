<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\output\LG-06-CTR.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\output\LG-06-CTR.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jul 25 19:19:25 2024
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; keyscan &rArr; press_OK_function &rArr; specialty_mode_OKkey &rArr; specialty_cursor_id_dis &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel4_5_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from stm32f0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1c]">SPI2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[15]">TIM14_IRQHandler</a> from stm32f0xx_it.o(i.TIM14_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[16]">TIM15_IRQHandler</a> from stm32f0xx_it.o(i.TIM15_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[17]">TIM16_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[18]">TIM17_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from stm32f0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from stm32f0xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1d]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1e]">USART2_IRQHandler</a> from stm32f0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[22]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[23]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[180]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[181]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[182]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[183]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[184]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Dis
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_preinstall_move_return
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameter_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraORmode_shift
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_para_clear
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraORmode_shift
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cunrent_para_display
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_para_dis
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[109]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_count
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_count
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_count
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interval_time_dis
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_count
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_count
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[18a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[29]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[32]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[31]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[18e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetCalibrationFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_function_init
</UL>

<P><STRONG><a name="[83]"></a>ADC_shutdown</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, low_power.o(i.ADC_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[3e]"></a>A_d_c_int</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(i.A_d_c_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = A_d_c_int &rArr; Adc_Gpio_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_int
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_function_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>Adc_Gpio_init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, adc.o(i.Adc_Gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Adc_Gpio_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
</UL>

<P><STRONG><a name="[40]"></a>Adc_function_init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, adc.o(i.Adc_function_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Adc_function_init &rArr; ADC_GetCalibrationFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
</UL>

<P><STRONG><a name="[44]"></a>Address_set</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, oled.o(i.Address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo_display
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_frame_display
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P16x16Str
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_shi_fen_miao_display
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
</UL>

<P><STRONG><a name="[47]"></a>Angle_dis</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, specialty_mode.o(i.Angle_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Angle_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_dis
</UL>

<P><STRONG><a name="[4b]"></a>Boost_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(i.Boost_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Boost_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[4d]"></a>Brightness_dis</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, orbital.o(i.Brightness_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Brightness_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[4e]"></a>Burn_code_value</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, pair.o(i.Burn_code_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Burn_code_value &rArr; bornd_code_dis &rArr; The_page_processing &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TxAddr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RxAddr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_reconver
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICcode_checksum_verify
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair_send_data
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bornd_code_dis
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>ChangeKey_exti_interrupt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpio.o(i.ChangeKey_exti_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChangeKey_exti_interrupt &rArr; LL_SYSCFG_SetEXTISource
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSCFG_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[62]"></a>Charging_Dis</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, oled.o(i.Charging_Dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Charging_Dis &rArr; battery_display &rArr; LCD_Fill &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_powers
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_display
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
</UL>

<P><STRONG><a name="[102]"></a>Check_Buffer_Empty</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, config.o(i.Check_Buffer_Empty))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_init_from_A650
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_keyscan_send
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_paraORmode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_move
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_and_para_sendt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_para_sendTo_motor
</UL>

<P><STRONG><a name="[49]"></a>Check_String</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, oled.o(i.Check_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Check_String
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo_display
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Percentage_Dis
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_display
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_pix_amt_display
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness_dis
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_set_display
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_page_processing
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Status_display
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cunrent_para_display
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_display
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_start_stop_dis
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_time_dis
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_display
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_disp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manulORauto_dis
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interval_time_dis
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integer_display
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_display
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_para_dis
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_mode_dis
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pecialty_pix_amt_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiantou_display
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_jahao
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_dis
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motor_status_display
</UL>

<P><STRONG><a name="[66]"></a>Check_String_Size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, oled.o(i.Check_String_Size))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>

<P><STRONG><a name="[67]"></a>ConfirmOrCancel_dis</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, specialty_mode.o(i.ConfirmOrCancel_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ConfirmOrCancel_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
</UL>

<P><STRONG><a name="[69]"></a>Cunrent_para_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, specialty_mode.o(i.Cunrent_para_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Cunrent_para_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_totaol_time_dis
</UL>

<P><STRONG><a name="[6b]"></a>Current_Status_display</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, specialty_mode.o(i.Current_Status_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Current_Status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shotting_Get_data_from_controller
</UL>

<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel4_5_IRQHandler &rArr; Usart22_Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Delay_amount_adjust</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, orbital.o(i.Delay_amount_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Delay_amount_adjust &rArr; Delay_pix_amt_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_pix_amt_display
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpOrDown_adjust_para
</UL>

<P><STRONG><a name="[139]"></a>Delay_mode_cursor_shift</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, orbital.o(i.Delay_mode_cursor_shift))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[6f]"></a>Delay_pix_amt_display</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, orbital.o(i.Delay_pix_amt_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Delay_pix_amt_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_amount_adjust
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_glint
</UL>

<P><STRONG><a name="[71]"></a>Device_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.Device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Device_init &rArr; Spi_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_gpio_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_pin_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boost_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>Dma_SendIRQ_Dispose</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(i.Dma_SendIRQ_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Tx_Complete
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableIT_TC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
</UL>

<P><STRONG><a name="[41]"></a>Dma_int</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, adc.o(i.Dma_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dma_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
</UL>

<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.EXTI2_3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_press_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>Enter_into_Pair</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, pair.o(i.Enter_into_Pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Enter_into_Pair &rArr; bornd_code_dis &rArr; The_page_processing &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TxAddr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RxAddr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_reconver
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bornd_code_dis
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_To_Pair
</UL>

<P><STRONG><a name="[7d]"></a>FLASH_ErasePage</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_OnePage
</UL>

<P><STRONG><a name="[80]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[17d]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>

<P><STRONG><a name="[7f]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword
</UL>

<P><STRONG><a name="[17c]"></a>FLASH_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>

<P><STRONG><a name="[7e]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[56]"></a>Feed_IWDG</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Feed_IWDG))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_holfword
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_OnePage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_frame_display
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P16x16Str
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_shi_fen_miao_display
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_check
</UL>

<P><STRONG><a name="[81]"></a>Forbidden_Used</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, low_power.o(i.Forbidden_Used))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Forbidden_Used &rArr; ShutDown_AllIO_High_resistance_mode &rArr; input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown_AllIO_High_resistance_mode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeKey_exti_interrupt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_theSystem
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_shutdown
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_INUP_Init</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, gpio.o(i.GPIO_INUP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_INUP_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_pin_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Irq_gpio_init
</UL>

<P><STRONG><a name="[4c]"></a>GPIO_OUT_init</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, gpio.o(i.GPIO_OUT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_GPIO_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_gpio_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boost_init
</UL>

<P><STRONG><a name="[8c]"></a>Get_data_from_Motor</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, specialty_mode.o(i.Get_data_from_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Get_data_from_Motor &rArr; specialty_page_mode_dis &rArr; specialty_cursor_id_mode_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_mode_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[89]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ICcode_checksum_verify</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pair.o(i.ICcode_checksum_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ICcode_checksum_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
</UL>

<P><STRONG><a name="[8e]"></a>Irq_gpio_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf24l01.o(i.Irq_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Irq_gpio_init &rArr; GPIO_INUP_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INUP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_GPIO_Init
</UL>

<P><STRONG><a name="[8f]"></a>Key_To_Pair</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, keyscan.o(i.Key_To_Pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Key_To_Pair &rArr; Enter_into_Pair &rArr; bornd_code_dis &rArr; The_page_processing &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>LCD_Clear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, oled.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Clear &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_key_continue
</UL>

<P><STRONG><a name="[54]"></a>LCD_Fill</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, oled.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_Fill &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_connection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo_display
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DownCount
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_display
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_page_processing
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_motor_battery_dis_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_downcount_times_display
</UL>

<P><STRONG><a name="[93]"></a>LCD_P16x16Str</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, oled.o(i.LCD_P16x16Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_P16x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>

<P><STRONG><a name="[94]"></a>LCD_P8x16Str</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, oled.o(i.LCD_P8x16Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>

<P><STRONG><a name="[92]"></a>LCD_WR_DATA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oled.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo_display
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_frame_display
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P16x16Str
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_shi_fen_miao_display
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_scan
</UL>

<P><STRONG><a name="[46]"></a>LCD_WR_DATA8</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled.o(i.LCD_WR_DATA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>

<P><STRONG><a name="[45]"></a>LCD_WR_REG</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>

<P><STRONG><a name="[96]"></a>LCD_shi_fen_miao_display</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, oled.o(i.LCD_shi_fen_miao_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_shi_fen_miao_display &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DownCount
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_downcount_times_display
</UL>

<P><STRONG><a name="[42]"></a>LL_GPIO_Init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_opendrain
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown_AllIO_High_resistance_mode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INUP_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Gpio_init
</UL>

<P><STRONG><a name="[97]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[9b]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[cd]"></a>LL_SPI_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f0xx_ll_spi.o(i.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_init
</UL>

<P><STRONG><a name="[a9]"></a>LL_TIM_Init</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f0xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[9c]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f0xx_ll_tim.o(i.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_TIM_OC_Init &rArr; OC4Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[a1]"></a>LL_USART_Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32f0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_init
</UL>

<P><STRONG><a name="[a2]"></a>Lcd_Init</STRONG> (Thumb, 578 bytes, Stack size 16 bytes, oled.o(i.Lcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Lcd_Init &rArr; LCD_Clear &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>Logo_display</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, oled.o(i.Logo_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Logo_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>LowBattery_wakeup</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, low_power.o(i.LowBattery_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LowBattery_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_active_time_out
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[a6]"></a>MX_TIM3_Init</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, main.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM3_Init &rArr; LL_TIM_OC_Init &rArr; OC4Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MX_USART2_UART_Init &rArr; Usart22_init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>Manual_page_OK</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, orbital.o(i.Manual_page_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Manual_page_OK &rArr; Speed_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_display
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>NRF24L01_Clear_IRQ_Flag</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rf24l01.o(i.NRF24L01_Clear_IRQ_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NRF24L01_Clear_IRQ_Flag &rArr; NRF24L01_Read_Status_Register &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Status_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
</UL>

<P><STRONG><a name="[b4]"></a>NRF24L01_Read_Buf</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rf24l01.o(i.NRF24L01_Read_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NRF24L01_Read_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_check
</UL>

<P><STRONG><a name="[b5]"></a>NRF24L01_Read_Reg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rf24l01.o(i.NRF24L01_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NRF24L01_Read_Reg &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_send_data
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
</UL>

<P><STRONG><a name="[b2]"></a>NRF24L01_Read_Status_Register</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf24l01.o(i.NRF24L01_Read_Status_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NRF24L01_Read_Status_Register &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Clear_IRQ_Flag
</UL>

<P><STRONG><a name="[58]"></a>NRF24L01_RxPacket</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rf24l01.o(i.NRF24L01_RxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NRF24L01_RxPacket &rArr; NRF24L01_Read_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_read_data
</UL>

<P><STRONG><a name="[51]"></a>NRF24L01_Set_RxAddr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rf24l01.o(i.NRF24L01_Set_RxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NRF24L01_Set_RxAddr &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_reconver
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
</UL>

<P><STRONG><a name="[50]"></a>NRF24L01_Set_TxAddr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf24l01.o(i.NRF24L01_Set_TxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NRF24L01_Set_TxAddr &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_reconver
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
</UL>

<P><STRONG><a name="[5c]"></a>NRF24L01_TxPacket</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, rf24l01.o(i.NRF24L01_TxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NRF24L01_TxPacket &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair_send_data
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_send_data
</UL>

<P><STRONG><a name="[b7]"></a>NRF24L01_Write_Buf</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, rf24l01.o(i.NRF24L01_Write_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TxAddr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RxAddr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_check
</UL>

<P><STRONG><a name="[4f]"></a>NRF24L01_Write_Reg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rf24l01.o(i.NRF24L01_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01_Write_Reg &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_reconver
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sleep
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
</UL>

<P><STRONG><a name="[b8]"></a>NRF24L01_check</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, rf24l01.o(i.NRF24L01_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NRF24L01_check &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
</UL>

<P><STRONG><a name="[b9]"></a>Nrf24L01_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rf24l01.o(i.Nrf24L01_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Nrf24L01_init &rArr; NRF24L01_check &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>Oled_EnlPrint</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, oled.o(i.Oled_EnlPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P16x16Str
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo_display
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DownCount
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Percentage_Dis
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_display
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_pix_amt_display
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness_dis
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_dis
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_set_display
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair_send_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_page_processing
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bornd_code_dis
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Status_display
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cunrent_para_display
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_display
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_start_stop_dis
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_time_dis
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_display
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_disp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manulORauto_dis
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interval_time_dis
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integer_display
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_display
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_para_dis
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_mode_dis
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pecialty_pix_amt_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiantou_display
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_jahao
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnOrNext_dis
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmOrCancel_dis
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_dis
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_check
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motor_status_display
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_downcount_times_display
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_clear_han_display
</UL>

<P><STRONG><a name="[bc]"></a>Page_preinstall_move_return</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, specialty_mode.o(i.Page_preinstall_move_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Page_preinstall_move_return &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiantou_display
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnOrNext_dis
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_para_dis
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[d2]"></a>Pairing_time</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pair.o(i.Pairing_time))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>Pwr_key_continue</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, keyscan.o(i.Pwr_key_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Pwr_key_continue &rArr; wait_for_init &rArr; TurnOff_ShutDonw_Battery_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[99]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[9a]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[98]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[c5]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[ba]"></a>RF24L01_GPIO_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rf24l01.o(i.RF24L01_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RF24L01_GPIO_Init &rArr; Irq_gpio_init &rArr; GPIO_INUP_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INUP_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Irq_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
</UL>

<P><STRONG><a name="[bb]"></a>RF24L01_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, rf24l01.o(i.RF24L01_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RF24L01_Init &rArr; NRF24L01_Set_TxAddr &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TxAddr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RxAddr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Clear_IRQ_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
</UL>

<P><STRONG><a name="[53]"></a>RF24L01_Set_Mode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rf24l01.o(i.RF24L01_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RF24L01_Set_Mode &rArr; NRF24L01_Write_Reg &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair_send_data
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_send_data
</UL>

<P><STRONG><a name="[5d]"></a>RF_reconver</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pair.o(i.RF_reconver))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RF_reconver &rArr; NRF24L01_Set_TxAddr &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TxAddr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
</UL>

<P><STRONG><a name="[79]"></a>Reset_Tx_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.Reset_Tx_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[87]"></a>Reset_theSystem</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, low_power.o(i.Reset_theSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reset_theSystem
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[bf]"></a>ReturnOrNext_dis</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, specialty_mode.o(i.ReturnOrNext_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReturnOrNext_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_page_return
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_preinstall_move_return
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>Set_DDab_set_if</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ab_set.o(i.Set_DDab_set_if))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[169]"></a>Set_ab_set_if</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ab_set.o(i.Set_ab_set_if))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[12f]"></a>Set_adc_back</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.Set_adc_back))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[14a]"></a>Set_enter_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, specialty_mode.o(i.Set_enter_time))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
</UL>

<P><STRONG><a name="[c2]"></a>ShutDown</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, low_power.o(i.ShutDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ShutDown &rArr; ShutDown_AllIO_High_resistance_mode &rArr; input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrKey_exti_interrupt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown_AllIO_High_resistance_mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_on_int
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_theSystem
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_shutdown
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Out_And_Enter_Stop_Mode
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_the_powers_status
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_key_continue
</UL>

<P><STRONG><a name="[85]"></a>ShutDown_AllIO_High_resistance_mode</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, gpio.o(i.ShutDown_AllIO_High_resistance_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ShutDown_AllIO_High_resistance_mode &rArr; input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_opendrain
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[b0]"></a>Speed_display</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, orbital.o(i.Speed_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Speed_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_page_OK
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[74]"></a>Spi_init</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, gpio.o(i.Spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Spi_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[95]"></a>Spi_write_data</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.Spi_write_data))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>

<P><STRONG><a name="[10b]"></a>String_Printf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart.o(i.String_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = String_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_enter_boot_if
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_read_data
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[144]"></a>SystemClock_Config</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>TIM14_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM14_IRQHandler &rArr; Video_times_downcount &rArr; Video_downcount_times_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_count
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;splty_mode_time_count
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_interval_count
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_cycle_count
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_cout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_time_out_countdown
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_times_downcount
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DCount
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pairing_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM15_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.TIM15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>Task_Percentage_Dis</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, orbital.o(i.Task_Percentage_Dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Task_Percentage_Dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[d8]"></a>The_motor_battery_dis_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oled.o(i.The_motor_battery_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = The_motor_battery_dis_init &rArr; battery_data_display &rArr; battery_display &rArr; LCD_Fill &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_frame_display
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[db]"></a>The_page_processing</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, oled.o(i.The_page_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = The_page_processing &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;english_page_dis
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chinese_page_dis
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bornd_code_dis
</UL>

<P><STRONG><a name="[d3]"></a>Time_DCount</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, orbital.o(i.Time_DCount))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>Time_DownCount</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, orbital.o(i.Time_DownCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Time_DownCount &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_shi_fen_miao_display
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
</UL>

<P><STRONG><a name="[dd]"></a>Time_Out_And_Enter_Stop_Mode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, low_power.o(i.Time_Out_And_Enter_Stop_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Time_Out_And_Enter_Stop_Mode &rArr; ShutDown &rArr; ShutDown_AllIO_High_resistance_mode &rArr; input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_active_time_out
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>TurnOff_ShutDonw_Battery_dis</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, oled.o(i.TurnOff_ShutDonw_Battery_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TurnOff_ShutDonw_Battery_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_powers
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>USART1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; usart1_receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receiver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USART2_IRQHandler &rArr; usart22_read_byte &rArr; usart22_Recdata_Handling &rArr; bootloader_action_if &rArr; enter_bootloader &rArr; write_bootTag &rArr; write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_read_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>UpOrDown_adjust_para</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, orbital.o(i.UpOrDown_adjust_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UpOrDown_adjust_para &rArr; Delay_amount_adjust &rArr; Delay_pix_amt_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_amount_adjust
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[6d]"></a>Usart22_Dma_SendIRQ_Dispose</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.Usart22_Dma_SendIRQ_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart22_Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Reset_Tx_Complete
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableIT_TC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>Usart22_Receiver</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.Usart22_Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart22_Receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_GetDataLength
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_read_byte
</UL>

<P><STRONG><a name="[e6]"></a>Usart22_Reset_Tx_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.Usart22_Reset_Tx_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[16a]"></a>Video_Get_downcount_times</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, video.o(i.Video_Get_downcount_times))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
</UL>

<P><STRONG><a name="[f7]"></a>Video_check_the_motor_status</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, video.o(i.Video_check_the_motor_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Video_check_the_motor_status &rArr; Video_motor_status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motor_status_display
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[f9]"></a>Video_downcount_times_display</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, video.o(i.Video_downcount_times_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Video_downcount_times_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_shi_fen_miao_display
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_times_downcount
</UL>

<P><STRONG><a name="[fa]"></a>Video_mode_cursor_shift</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, orbital.o(i.Video_mode_cursor_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Video_mode_cursor_shift &rArr; minutes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[f8]"></a>Video_motor_status_display</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, video.o(i.Video_motor_status_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Video_motor_status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_check_the_motor_status
</UL>

<P><STRONG><a name="[122]"></a>Video_motor_status_return</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, video.o(i.Video_motor_status_return))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
</UL>

<P><STRONG><a name="[d6]"></a>Video_times_downcount</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, video.o(i.Video_times_downcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Video_times_downcount &rArr; Video_downcount_times_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_downcount_times_display
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18f]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[48]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DownCount
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Percentage_Dis
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_display
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_pix_amt_display
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness_dis
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pair_send_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Status_display
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cunrent_para_display
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_time_dis
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_display
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interval_time_dis
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integer_display
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_display
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_para_dis
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_mode_dis
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pecialty_pix_amt_display
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_dis
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_downcount_times_display
</UL>

<P><STRONG><a name="[190]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[191]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[39]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[114]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, orbital.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;english_page_dis
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chinese_page_dis
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_shift
</UL>

<P><STRONG><a name="[192]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[193]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[194]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[101]"></a>ab_set_move</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, ab_set.o(i.ab_set_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ab_set_move &rArr; controller_send_data_to_motor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[103]"></a>ab_set_press_ok</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ab_set.o(i.ab_set_press_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ab_set_press_ok &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_cear
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[d4]"></a>active_time_out_countdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, low_power.o(i.active_time_out_countdown))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>adc_cout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.adc_cout))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>angle_cear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, orbital.o(i.angle_cear))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_press_ok
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[105]"></a>angle_display</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, orbital.o(i.angle_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = angle_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[d9]"></a>battery_data_display</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, oled.o(i.battery_data_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = battery_data_display &rArr; battery_display &rArr; LCD_Fill &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_powers
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_display
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_motor_battery_dis_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_battery_dis
</UL>

<P><STRONG><a name="[65]"></a>battery_display</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, oled.o(i.battery_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = battery_display &rArr; LCD_Fill &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Dis
</UL>

<P><STRONG><a name="[da]"></a>battery_frame_display</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, oled.o(i.battery_frame_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = battery_frame_display &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_motor_battery_dis_init
</UL>

<P><STRONG><a name="[c4]"></a>battery_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, oled.o(i.battery_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = battery_init &rArr; The_motor_battery_dis_init &rArr; battery_data_display &rArr; battery_display &rArr; LCD_Fill &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_powers
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_frame_display
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_motor_battery_dis_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_key_continue
</UL>

<P><STRONG><a name="[107]"></a>bootloader_action_if</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, bootloader.o(i.bootloader_action_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bootloader_action_if &rArr; enter_bootloader &rArr; write_bootTag &rArr; write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_lengt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_bootloader
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
</UL>

<P><STRONG><a name="[55]"></a>bornd_code_dis</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, oled.o(i.bornd_code_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bornd_code_dis &rArr; The_page_processing &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_page_processing
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
</UL>

<P><STRONG><a name="[16d]"></a>cear_the_id_add</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, specialty_mode.o(i.cear_the_id_add))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[72]"></a>changeIO_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.changeIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = changeIO_Init &rArr; GPIO_INUP_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INUP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[bd]"></a>change_page</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, orbital.o(i.change_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_page_return
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_key_enter_moveInterfer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_press_ok
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_preinstall_move_return
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
</UL>

<P><STRONG><a name="[16b]"></a>check_abpoint_Set_if</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ab_set.o(i.check_abpoint_Set_if))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[10e]"></a>check_connection</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, orbital.o(i.check_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = check_connection &rArr; oled_print_screen &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_screen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_battery_dis
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_glint
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>check_enter_boot_if</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bootloader.o(i.check_enter_boot_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_enter_boot_if &rArr; String_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
</UL>

<P><STRONG><a name="[52]"></a>check_sum_add</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, orbital.o(i.check_sum_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_init_from_A650
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_keyscan_send
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_paraORmode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_and_para_sendt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_para_sendTo_motor
</UL>

<P><STRONG><a name="[112]"></a>check_the_powers_status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, keyscan.o(i.check_the_powers_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = check_the_powers_status &rArr; ShutDown &rArr; ShutDown_AllIO_High_resistance_mode &rArr; input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[179]"></a>checksum_verify</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rf24l01.o(i.checksum_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checksum_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_read_data
</UL>

<P><STRONG><a name="[113]"></a>chinese_page_dis</STRONG> (Thumb, 1752 bytes, Stack size 8 bytes, oled.o(i.chinese_page_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = chinese_page_dis &rArr; The_page_processing &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_page_processing
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_display
</UL>

<P><STRONG><a name="[115]"></a>config_page_ok</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, config.o(i.config_page_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = config_page_ok &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_para_clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[70]"></a>controller_send_data_to_motor</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, orbital.o(i.controller_send_data_to_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = controller_send_data_to_motor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpOrDown_adjust_para
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_amount_adjust
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_keyscan_send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_press_ok
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_move
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutKey_start
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
</UL>

<P><STRONG><a name="[176]"></a>count_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, video.o(i.count_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
</UL>

<P><STRONG><a name="[119]"></a>cursor_count</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, config.o(i.cursor_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cursor_count &rArr; specialty_cursor_id_dis &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_display
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_shift
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_shift
</UL>

<P><STRONG><a name="[11a]"></a>cursor_display</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, config.o(i.cursor_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cursor_display &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_page
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_count
</UL>

<P><STRONG><a name="[10f]"></a>cursor_glint</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, orbital.o(i.cursor_glint))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cursor_glint &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_pix_amt_display
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;durationORdelay_time_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_connection
</UL>

<P><STRONG><a name="[11f]"></a>cursor_shift</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, orbital.o(i.cursor_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = cursor_shift &rArr; specialty_cursor_id_shift &rArr; cursor_count &rArr; specialty_cursor_id_dis &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_count
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[157]"></a>data_count</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, orbital.o(i.data_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = data_count
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_adjust
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>

<P><STRONG><a name="[121]"></a>delay_page_ok</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, orbital.o(i.delay_page_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = delay_page_ok &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DownCount
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_back
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motor_status_return
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[124]"></a>delet_paraORmode</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, specialty_mode.o(i.delet_paraORmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = delet_paraORmode &rArr; paraORmode_shift &rArr; specialty_page_para_dis &rArr; specialty_cursor_id_para_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraORmode_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return
</UL>

<P><STRONG><a name="[126]"></a>delete_jahao</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, specialty_mode.o(i.delete_jahao))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = delete_jahao &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraORmode_shift
</UL>

<P><STRONG><a name="[82]"></a>disable_interrupt</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, low_power.o(i.disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disable_interrupt &rArr; Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[b3]"></a>drv_spi_read_write_byte</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rf24l01.o(i.drv_spi_read_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Status_Register
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Clear_IRQ_Flag
</UL>

<P><STRONG><a name="[11e]"></a>durationORdelay_time_dis</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, orbital.o(i.durationORdelay_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = durationORdelay_time_dis &rArr; minutes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_glint
</UL>

<P><STRONG><a name="[cb]"></a>enable_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, low_power.o(i.enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[128]"></a>english_page_dis</STRONG> (Thumb, 1700 bytes, Stack size 8 bytes, oled.o(i.english_page_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = english_page_dis &rArr; The_page_processing &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;The_page_processing
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_display
</UL>

<P><STRONG><a name="[10a]"></a>enter_bootloader</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bootloader.o(i.enter_bootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = enter_bootloader &rArr; write_bootTag &rArr; write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bootTag
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
</UL>

<P><STRONG><a name="[12a]"></a>erase_flash_OnePage</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(i.erase_flash_OnePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>

<P><STRONG><a name="[12b]"></a>factory_set_display</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, config.o(i.factory_set_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = factory_set_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[12c]"></a>filtering</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, adc.o(i.filtering))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = filtering &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_adc_back
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
</UL>

<P><STRONG><a name="[132]"></a>get_data_form_A650</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, orbital.o(i.get_data_form_A650))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_data_form_A650 &rArr; controller_send_data_to_motor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[133]"></a>get_init_from_A650</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, orbital.o(i.get_init_from_A650))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_init_from_A650 &rArr; check_sum_add
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>hours_time_dis</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, orbital.o(i.hours_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hours_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_shi_fen_miao_display
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_mode_cursor_shift
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpOrDown_adjust_para
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;durationORdelay_time_dis
</UL>

<P><STRONG><a name="[5b]"></a>if_write_flash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash.o(i.if_write_flash))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_amount_adjust
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_key_continue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[cc]"></a>input_opendrain</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, gpio.o(i.input_opendrain))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown_AllIO_High_resistance_mode
</UL>

<P><STRONG><a name="[134]"></a>integer_display</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, orbital.o(i.integer_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = integer_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_dis
</UL>

<P><STRONG><a name="[135]"></a>interval_time_dis</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, orbital.o(i.interval_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = interval_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>

<P><STRONG><a name="[68]"></a>inverse_get_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, orbital.o(i.inverse_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_mode_dis
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_adjust
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_check_the_motor_status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Status_display
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnOrNext_dis
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmOrCancel_dis
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_para_dis
</UL>

<P><STRONG><a name="[c0]"></a>jiantou_display</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, specialty_mode.o(i.jiantou_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = jiantou_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_page_return
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_preinstall_move_return
</UL>

<P><STRONG><a name="[136]"></a>key_Handle</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, keyscan.o(i.key_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = key_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[137]"></a>keyscan</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, keyscan.o(i.keyscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = keyscan &rArr; press_OK_function &rArr; specialty_mode_OKkey &rArr; specialty_cursor_id_dis &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_mode_cursor_shift
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpOrDown_adjust_para
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_cursor_shift
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_keyscan_send
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_key_enter_moveInterfer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_move
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowBattery_wakeup
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_Handle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_the_powers_status
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_key_continue
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutKey_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remotoe_cursor_dispose
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue_if
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>keyscan_pin_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio.o(i.keyscan_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = keyscan_pin_init &rArr; GPIO_INUP_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INUP_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[15d]"></a>language_display</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config.o(i.language_display))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; keyscan &rArr; press_OK_function &rArr; specialty_mode_OKkey &rArr; specialty_cursor_id_dis &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_data_Dispose
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_active_time_out
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_powers
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_init_from_A650
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_connection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Out_And_Enter_Stop_Mode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo_display
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_To_Pair
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[149]"></a>main_page_ok</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, config.o(i.main_page_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main_page_ok &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_dis
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_mode_dis
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_back
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_enter_time
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[14c]"></a>manulORauto_dis</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, orbital.o(i.manulORauto_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = manulORauto_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
</UL>

<P><STRONG><a name="[e4]"></a>minutes_time_dis</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, orbital.o(i.minutes_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = minutes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_shi_fen_miao_display
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_mode_cursor_shift
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpOrDown_adjust_para
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;durationORdelay_time_dis
</UL>

<P><STRONG><a name="[14d]"></a>mode_and_para_sendt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, specialty_mode.o(i.mode_and_para_sendt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mode_and_para_sendt &rArr; check_sum_add
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_page_return
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
</UL>

<P><STRONG><a name="[110]"></a>motor_battery_dis</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oled.o(i.motor_battery_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = motor_battery_dis &rArr; battery_data_display &rArr; battery_display &rArr; LCD_Fill &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_connection
</UL>

<P><STRONG><a name="[146]"></a>motor_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, orbital.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = motor_init &rArr; para_read_from_flash &rArr; read_flash_holfword
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>move_to_disp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, orbital.o(i.move_to_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = move_to_disp &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[73]"></a>oled_gpio_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio.o(i.oled_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = oled_gpio_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[11c]"></a>oled_print_page</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, oled.o(i.oled_print_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = oled_print_page &rArr; page_display &rArr; english_page_dis &rArr; The_page_processing &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_display
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_display
</UL>

<P><STRONG><a name="[10c]"></a>oled_print_screen</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, oled.o(i.oled_print_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = oled_print_screen &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_display
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_connection
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
</UL>

<P><STRONG><a name="[151]"></a>page_display</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, oled.o(i.page_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = page_display &rArr; english_page_dis &rArr; The_page_processing &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;english_page_dis
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chinese_page_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_page
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_screen
</UL>

<P><STRONG><a name="[142]"></a>page_return</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyscan.o(i.page_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = page_return &rArr; delet_paraORmode &rArr; paraORmode_shift &rArr; specialty_page_para_dis &rArr; specialty_cursor_id_para_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_paraORmode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[13f]"></a>page_return_adjust</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, config.o(i.page_return_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = page_return_adjust &rArr; specilty_page_return &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_page_return
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_para_clear
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[125]"></a>paraORmode_shift</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, specialty_mode.o(i.paraORmode_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = paraORmode_shift &rArr; specialty_page_para_dis &rArr; specialty_cursor_id_para_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_mode_dis
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_jahao
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_clear_han_display
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_para_dis
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_paraORmode
</UL>

<P><STRONG><a name="[155]"></a>para_count</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, orbital.o(i.para_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = para_count &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>

<P><STRONG><a name="[117]"></a>para_init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, config.o(i.para_init))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
</UL>

<P><STRONG><a name="[14e]"></a>para_read_from_flash</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, flash.o(i.para_read_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = para_read_from_flash &rArr; read_flash_holfword
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_holfword
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[138]"></a>param_adjust</STRONG> (Thumb, 782 bytes, Stack size 24 bytes, orbital.o(i.param_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = param_adjust &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_dis
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_adjust
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_count
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interval_time_dis
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_count
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue
</UL>

<P><STRONG><a name="[11d]"></a>param_display</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, orbital.o(i.param_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Percentage_Dis
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_display
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_pix_amt_display
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness_dis
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;language_display
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_set_display
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_dis
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_display
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_start_stop_dis
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_time_dis
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_display
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_disp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_display
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_display
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_screen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_glint
</UL>

<P><STRONG><a name="[14f]"></a>parameter_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, orbital.o(i.parameter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = parameter_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[161]"></a>pecialty_pix_amt_display</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, specialty_mode.o(i.pecialty_pix_amt_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pecialty_pix_amt_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_dis
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_totaol_time_dis
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
</UL>

<P><STRONG><a name="[162]"></a>percentage_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, adc.o(i.percentage_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = percentage_get &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
</UL>

<P><STRONG><a name="[15b]"></a>pix_amt_compara_dis</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, orbital.o(i.pix_amt_compara_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pix_amt_compara_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shotting_Get_data_from_controller
</UL>

<P><STRONG><a name="[15a]"></a>pix_amt_display</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, orbital.o(i.pix_amt_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pix_amt_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[13d]"></a>press_OK_function</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, keyscan.o(i.press_OK_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = press_OK_function &rArr; specialty_mode_OKkey &rArr; specialty_cursor_id_dis &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_page_OK
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ab_set_press_ok
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_mode_back
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_cear
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[141]"></a>press_key_continue</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, keyscan.o(i.press_key_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = press_key_continue &rArr; param_adjust &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_addend_data
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[13b]"></a>press_key_continue_if</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, orbital.o(i.press_key_continue_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = press_key_continue_if
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[ca]"></a>pwrKey_exti_interrupt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gpio.o(i.pwrKey_exti_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwrKey_exti_interrupt &rArr; LL_SYSCFG_SetEXTISource
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSCFG_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[13e]"></a>pwr_key_enter_moveInterfer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, specialty_mode.o(i.pwr_key_enter_moveInterfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pwr_key_enter_moveInterfer &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_totaol_time_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[147]"></a>read_ADC_value</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, adc.o(i.read_ADC_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = read_ADC_value &rArr; TurnOff_ShutDonw_Battery_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Dis
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>read_flash_holfword</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, flash.o(i.read_flash_holfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_flash_holfword
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bootTag
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
</UL>

<P><STRONG><a name="[168]"></a>receiver_data_from_A650</STRONG> (Thumb, 1384 bytes, Stack size 32 bytes, orbital.o(i.receiver_data_from_A650))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = receiver_data_from_A650 &rArr; Page_preinstall_move_return &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_DownCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_mode_dis
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_form_A650
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_get_reshot_form_motor
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_totaol_time_dis
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shotting_Get_data_from_controller
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_mode_back
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_battery_dis
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_abpoint_Set_if
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cear_the_id_add
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bornd_code_dis
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_check_the_motor_status
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_downcount_times
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ab_set_if
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DDab_set_if
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_preinstall_move_return
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_Motor
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Status_display
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cunrent_para_display
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_display
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_read_data
</UL>

<P><STRONG><a name="[13c]"></a>remotoe_cursor_dispose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, orbital.o(i.remotoe_cursor_dispose))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[165]"></a>return_mode_back</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ab_set.o(i.return_mode_back))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[63]"></a>return_powers</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keyscan.o(i.return_powers))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Dis
</UL>

<P><STRONG><a name="[d0]"></a>scan_cycle_count</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, keyscan.o(i.scan_cycle_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>secondes_time_dis</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, orbital.o(i.secondes_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = secondes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_shi_fen_miao_display
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_mode_cursor_shift
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpOrDown_adjust_para
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_dis
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;durationORdelay_time_dis
</UL>

<P><STRONG><a name="[d1]"></a>send_interval_count</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(i.send_interval_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>set_active_time_out</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, low_power.o(i.set_active_time_out))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Out_And_Enter_Stop_Mode
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowBattery_wakeup
</UL>

<P><STRONG><a name="[166]"></a>set_addend_data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, orbital.o(i.set_addend_data))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue
</UL>

<P><STRONG><a name="[123]"></a>set_mode_back</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ab_set.o(i.set_mode_back))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_page_OK
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_page_ok
</UL>

<P><STRONG><a name="[c9]"></a>set_power_on_int</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keyscan.o(i.set_power_on_int))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[7a]"></a>set_press_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keyscan.o(i.set_press_time))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>shotting_Get_data_from_controller</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, specialty_mode.o(i.shotting_Get_data_from_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = shotting_Get_data_from_controller &rArr; specialty_totaol_time_dis &rArr; Cunrent_para_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_totaol_time_dis
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Status_display
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_display
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pix_amt_compara_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[140]"></a>shutKey_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, orbital.o(i.shutKey_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shutKey_start &rArr; controller_send_data_to_motor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[10d]"></a>single_cursor_dis</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, orbital.o(i.single_cursor_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_display
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_display
</UL>

<P><STRONG><a name="[15c]"></a>sleep_time_dis</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, orbital.o(i.sleep_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sleep_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[160]"></a>slow_start_stop_dis</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, orbital.o(i.slow_start_stop_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = slow_start_stop_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
</UL>

<P><STRONG><a name="[11b]"></a>specialty_cursor_id_dis</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, specialty_mode.o(i.specialty_cursor_id_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = specialty_cursor_id_dis &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_cursor_dis
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_page
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_para_dis
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_mode_dis
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiantou_display
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnOrNext_dis
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmOrCancel_dis
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_para_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_count
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
</UL>

<P><STRONG><a name="[170]"></a>specialty_cursor_id_mode_dis</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, specialty_mode.o(i.specialty_cursor_id_mode_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = specialty_cursor_id_mode_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_mode_dis
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
</UL>

<P><STRONG><a name="[171]"></a>specialty_cursor_id_para_dis</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, specialty_mode.o(i.specialty_cursor_id_para_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = specialty_cursor_id_para_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_para_dis
</UL>

<P><STRONG><a name="[120]"></a>specialty_cursor_id_shift</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, specialty_mode.o(i.specialty_cursor_id_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = specialty_cursor_id_shift &rArr; cursor_count &rArr; specialty_cursor_id_dis &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_count
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_shift
</UL>

<P><STRONG><a name="[c7]"></a>specialty_jiaHao_display</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, specialty_mode.o(i.specialty_jiaHao_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = specialty_jiaHao_display &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_scan
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_mode_dis
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnOrNext_dis
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_para_dis
</UL>

<P><STRONG><a name="[173]"></a>specialty_jiaHao_scan</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, specialty_mode.o(i.specialty_jiaHao_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = specialty_jiaHao_scan &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
</UL>

<P><STRONG><a name="[164]"></a>specialty_mode_OKkey</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, specialty_mode.o(i.specialty_mode_OKkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = specialty_mode_OKkey &rArr; specialty_cursor_id_dis &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_mode_dis
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_totaol_time_dis
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_print_screen
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Status_display
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_and_para_sendt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiantou_display
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnOrNext_dis
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmOrCancel_dis
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_para_sendTo_motor
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_para_dis
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[116]"></a>specialty_mode_para_clear</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, specialty_mode.o(i.specialty_mode_para_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = specialty_mode_para_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
</UL>

<P><STRONG><a name="[15f]"></a>specialty_move_dis</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, specialty_mode.o(i.specialty_move_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_display
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manulORauto_dis
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pecialty_pix_amt_display
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_page_return
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_get_reshot_form_motor
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_adjust
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shotting_Get_data_from_controller
</UL>

<P><STRONG><a name="[8d]"></a>specialty_page_mode_dis</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, specialty_mode.o(i.specialty_page_mode_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = specialty_page_mode_dis &rArr; specialty_cursor_id_mode_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_mode_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_page_return
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_Motor
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraORmode_shift
</UL>

<P><STRONG><a name="[be]"></a>specialty_page_para_dis</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, specialty_mode.o(i.specialty_page_para_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = specialty_page_para_dis &rArr; specialty_cursor_id_para_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_jiaHao_display
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_para_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_page_return
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_cursor_id_dis
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page_preinstall_move_return
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraORmode_shift
</UL>

<P><STRONG><a name="[153]"></a>specialty_para_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, specialty_mode.o(i.specialty_para_clear))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
</UL>

<P><STRONG><a name="[174]"></a>specialty_para_sendTo_motor</STRONG> (Thumb, 662 bytes, Stack size 24 bytes, specialty_mode.o(i.specialty_para_sendTo_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = specialty_para_sendTo_motor &rArr; check_sum_add
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_page_return
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_adjust
</UL>

<P><STRONG><a name="[167]"></a>specialty_totaol_time_dis</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, specialty_mode.o(i.specialty_totaol_time_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = specialty_totaol_time_dis &rArr; Cunrent_para_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cunrent_para_display
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pecialty_pix_amt_display
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specilty_page_return
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_OKkey
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_key_enter_moveInterfer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shotting_Get_data_from_controller
</UL>

<P><STRONG><a name="[158]"></a>specielty_para_adjust</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, specialty_mode.o(i.specielty_para_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = specielty_para_adjust &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_get_value
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_dis
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_count
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_para_sendTo_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>

<P><STRONG><a name="[15e]"></a>specielty_para_dis</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, specialty_mode.o(i.specielty_para_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = specielty_para_dis &rArr; secondes_time_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integer_display
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pecialty_pix_amt_display
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specielty_para_adjust
</UL>

<P><STRONG><a name="[154]"></a>specilty_clear_han_display</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, specialty_mode.o(i.specilty_clear_han_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = specilty_clear_han_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraORmode_shift
</UL>

<P><STRONG><a name="[16f]"></a>specilty_get_reshot_form_motor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, specialty_mode.o(i.specilty_get_reshot_form_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = specilty_get_reshot_form_motor &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
</UL>

<P><STRONG><a name="[13a]"></a>specilty_keyscan_send</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, specialty_mode.o(i.specilty_keyscan_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = specilty_keyscan_send &rArr; controller_send_data_to_motor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[152]"></a>specilty_page_return</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, specialty_mode.o(i.specilty_page_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = specilty_page_return &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_mode_dis
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_totaol_time_dis
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_and_para_sendt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jiantou_display
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnOrNext_dis
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_para_sendTo_motor
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_page_para_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
</UL>

<P><STRONG><a name="[d5]"></a>splty_mode_time_count</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, specialty_mode.o(i.splty_mode_time_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>status_display</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, orbital.o(i.status_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_String
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_move_dis
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shotting_Get_data_from_controller
</UL>

<P><STRONG><a name="[108]"></a>string_lengt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bootloader.o(i.string_lengt))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
</UL>

<P><STRONG><a name="[cf]"></a>time_count</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, orbital.o(i.time_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>time_delay_ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, orbital.o(i.time_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logo_display
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_To_Pair
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_reconver
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_into_Pair
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_check
</UL>

<P><STRONG><a name="[e0]"></a>usart1_receiver</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.usart1_receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart1_receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_GetDataLength
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>usart22_Recdata_Handling</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart.o(i.usart22_Recdata_Handling))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usart22_Recdata_Handling &rArr; bootloader_action_if &rArr; enter_bootloader &rArr; write_bootTag &rArr; write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_enter_boot_if
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_read_byte
</UL>

<P><STRONG><a name="[e1]"></a>usart22_read_byte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(i.usart22_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usart22_read_byte &rArr; usart22_Recdata_Handling &rArr; bootloader_action_if &rArr; enter_bootloader &rArr; write_bootTag &rArr; write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>version_dis</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oled.o(i.version_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = version_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_ok
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_adjust
</UL>

<P><STRONG><a name="[163]"></a>video_page_OK</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, orbital.o(i.video_page_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = video_page_OK &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mode_back
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_display
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controller_send_data_to_motor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_page
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_tag_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motor_status_return
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_downcount_times
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondes_time_dis
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_time_dis
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hours_time_dis
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_OK_function
</UL>

<P><STRONG><a name="[c3]"></a>wait_for_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, orbital.o(i.wait_for_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wait_for_init &rArr; TurnOff_ShutDonw_Battery_dis &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_on_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_key_continue
</UL>

<P><STRONG><a name="[148]"></a>wifi24G_data_Dispose</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf24l01.o(i.wifi24G_data_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wifi24G_data_Dispose &rArr; wifi24G_read_data &rArr; receiver_data_from_A650 &rArr; Page_preinstall_move_return &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_send_data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>wifi24G_read_data</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rf24l01.o(i.wifi24G_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wifi24G_read_data &rArr; receiver_data_from_A650 &rArr; Page_preinstall_move_return &rArr; change_page &rArr; single_cursor_dis &rArr; param_display &rArr; specialty_move_dis &rArr; status_display &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver_data_from_A650
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_data_Dispose
</UL>

<P><STRONG><a name="[177]"></a>wifi24G_send_data</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, rf24l01.o(i.wifi24G_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wifi24G_send_data &rArr; NRF24L01_TxPacket &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_data_Dispose
</UL>

<P><STRONG><a name="[75]"></a>wifi_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio.o(i.wifi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = wifi_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[84]"></a>wifi_sleep</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf24l01.o(i.wifi_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wifi_sleep &rArr; NRF24L01_Write_Reg &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[129]"></a>write_bootTag</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, flash.o(i.write_bootTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_bootTag &rArr; write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_holfword
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_bootloader
</UL>

<P><STRONG><a name="[86]"></a>write_flash_active</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash.o(i.write_flash_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_flash_active &rArr; write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_return_adjust
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_page_ok
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_key_continue
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[17b]"></a>write_flash_holfword</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, flash.o(i.write_flash_holfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>

<P><STRONG><a name="[17a]"></a>write_flash_holfword_buffer</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, flash.o(i.write_flash_holfword_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_flash_holfword_buffer &rArr; erase_flash_OnePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_OnePage
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bootTag
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[145]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[aa]"></a>LL_TIM_OC_EnablePreload</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, main.o(i.LL_TIM_OC_EnablePreload))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[a8]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[e9]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[78]"></a>LL_DMA_DisableChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_DisableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receiver
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[77]"></a>LL_DMA_DisableIT_TC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_DisableIT_TC))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[f4]"></a>LL_DMA_EnableChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[e8]"></a>LL_DMA_GetDataLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_GetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receiver
</UL>

<P><STRONG><a name="[ee]"></a>LL_DMA_SetChannelPriorityLevel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetChannelPriorityLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[ec]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_SetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[ed]"></a>LL_DMA_SetDataTransferDirection</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetDataTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetDataTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[eb]"></a>LL_DMA_SetMemoryAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_SetMemoryAddress))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[f0]"></a>LL_DMA_SetMemoryIncMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetMemoryIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemoryIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[f2]"></a>LL_DMA_SetMemorySize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetMemorySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemorySize
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[f3]"></a>LL_DMA_SetMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[ea]"></a>LL_DMA_SetPeriphAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_SetPeriphAddress))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[ef]"></a>LL_DMA_SetPeriphIncMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetPeriphIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[f1]"></a>LL_DMA_SetPeriphSize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetPeriphSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphSize
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[f6]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
</UL>

<P><STRONG><a name="[f5]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
</UL>

<P><STRONG><a name="[ad]"></a>Usart22_Receiver_Dma_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, uart.o(i.Usart22_Receiver_Dma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart22_Receiver_Dma_Init &rArr; LL_DMA_SetPeriphSize
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[ae]"></a>Usart22_Send_Dma_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, uart.o(i.Usart22_Send_Dma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usart22_Send_Dma_Init &rArr; LL_DMA_SetPeriphSize
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[ac]"></a>Usart22_init</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, uart.o(i.Usart22_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Usart22_init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[90]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, keyscan.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_To_Pair
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_Handle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_the_powers_status
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwr_key_continue
</UL>

<P><STRONG><a name="[143]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_pin_init
</UL>

<P><STRONG><a name="[5f]"></a>LL_SYSCFG_SetEXTISource</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.LL_SYSCFG_SetEXTISource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SYSCFG_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrKey_exti_interrupt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeKey_exti_interrupt
</UL>

<P><STRONG><a name="[61]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrKey_exti_interrupt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeKey_exti_interrupt
</UL>

<P><STRONG><a name="[60]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrKey_exti_interrupt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeKey_exti_interrupt
</UL>

<P><STRONG><a name="[df]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oled.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOff_ShutDonw_Battery_dis
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_data_display
</UL>

<P><STRONG><a name="[57]"></a>Pair_send_data</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, pair.o(i.Pair_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Pair_send_data &rArr; Oled_EnlPrint &rArr; LCD_P8x16Str &rArr; Address_set &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oled_EnlPrint
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
</UL>

<P><STRONG><a name="[b6]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf24l01.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_send_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>

<P><STRONG><a name="[88]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, low_power.o(i.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[c8]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, low_power.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Out_And_Enter_Stop_Mode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[c6]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, low_power.o(i.LL_RCC_SetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_theSystem
</UL>

<P><STRONG><a name="[127]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, low_power.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
</UL>

<P><STRONG><a name="[8a]"></a>NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, low_power.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forbidden_Used
</UL>

<P><STRONG><a name="[12d]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[9e]"></a>OC1Config</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, stm32f0xx_ll_tim.o(i.OC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[9f]"></a>OC2Config</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f0xx_ll_tim.o(i.OC2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC2Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[a0]"></a>OC3Config</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f0xx_ll_tim.o(i.OC3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC3Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[9d]"></a>OC4Config</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f0xx_ll_tim.o(i.OC4Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC4Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[fd]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fc]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[100]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ff]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
