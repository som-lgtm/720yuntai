<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\output\LG-06.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\output\LG-06.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sat Jun 29 11:18:56 2024
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; wifi24G_data_Dispose &rArr; wifi24G_read_data &rArr; Get_data_from_controller &rArr; Set_origin_OK &rArr; Video_abPoint_set &rArr; Video_speed_calculate &rArr; MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[22]">Algorithm_0</a> from uid_encryption.o(i.Algorithm_0) referenced from uid_encryption.o(.constdata)
 <LI><a href="#[23]">Algorithm_1</a> from uid_encryption.o(i.Algorithm_1) referenced from uid_encryption.o(.constdata)
 <LI><a href="#[24]">Algorithm_2</a> from uid_encryption.o(i.Algorithm_2) referenced from uid_encryption.o(.constdata)
 <LI><a href="#[25]">Algorithm_3</a> from uid_encryption.o(i.Algorithm_3) referenced from uid_encryption.o(.constdata)
 <LI><a href="#[26]">Algorithm_4</a> from uid_encryption.o(i.Algorithm_4) referenced from uid_encryption.o(.constdata)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel4_5_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from stm32f0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1c]">SPI2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[15]">TIM14_IRQHandler</a> from stm32f0xx_it.o(i.TIM14_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[16]">TIM15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[17]">TIM16_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[18]">TIM17_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from stm32f0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from stm32f0xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from stm32f0xx_it.o(i.TIM6_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1d]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1e]">USART2_IRQHandler</a> from stm32f0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[17b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[27]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[42]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[180]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wide_get_countdown_time
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_total_time_calculate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Max_amount_check
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_move_times_limit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Fastest_time_check
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Times_convert_to_speed
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wide_get_countdown_time
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_countdown_time
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_mode_para
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_para_clear
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_mode_para
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bootTag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Send_reshot_to_controller
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_para_data_to_controller
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Send_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cancel_the_para_set_return
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[123]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_Encryption_Key_Check
</UL>

<P><STRONG><a name="[14b]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp_Speed_Load
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialtyHH_Ramp_Speed_Load
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp_Speed_Load
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed_and_ramp_time
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_move_speed_calculate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_move_time_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_move_time_check
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialtyHH_Ramp_Speed_Load
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp_Speed_Load
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed_and_ramp_time
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialtyHH_Ramp_Speed_Load
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_dadd</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_slow_stopORstart
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_ram_load
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Times_convert_to_speed
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manaul_speed_conversion
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Times_convert_to_speed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_compensation_check
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_compensation_check
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_slow_stopORstart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_real_time_transmission
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manaul_speed_conversion
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_ram_load
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Times_convert_to_speed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_compensation_check
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_compensation_check
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_slow_stopORstart
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_SUM
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manaul_speed_conversion
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_move_speed_calculate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_ram_load
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Times_convert_to_speed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_compensation_check
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_compensation_check
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_parameter_calculate
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp_Speed_Load
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed_and_ramp_time
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_move_speed_calculate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_move_time_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_move_time_check
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialtyHH_Ramp_Speed_Load
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_parameter_calculate
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_slow_stopORstart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_real_time_transmission
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_SUM
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_move_speed_calculate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_ram_load
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Times_convert_to_speed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_compensation_check
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_compensation_check
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_parameter_calculate
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp_Speed_Load
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed_and_ramp_time
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_move_speed_calculate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_move_time_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_move_time_check
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_parameter_calculate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialtyHH_Ramp_Speed_Load
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_slow_stopORstart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_real_time_transmission
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wide_get_countdown_time
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_countdown_time
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_abPoint_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_set_abPoint
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manaul_speed_conversion
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_ram_load
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Times_convert_to_speed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_compensation_check
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_compensation_check
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manaul_speed_conversion
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wide_get_countdown_time
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_countdown_time
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manaul_speed_conversion
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_move_speed_calculate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_parameter_calculate
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[188]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[189]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18a]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2d]"></a>_float_epilogue</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[36]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[35]"></a>_double_epilogue</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[28]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetCalibrationFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_function_init
</UL>

<P><STRONG><a name="[f1]"></a>ADC_shutdown</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, low_power.o(i.ADC_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[43]"></a>A_d_c_int</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(i.A_d_c_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = A_d_c_int &rArr; Adc_Gpio_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Gpio_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_int
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_function_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>Absolute_value_calculation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common.o(i.Absolute_value_calculation))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_real_time_transmission
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_abPoint_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_set_abPoint
</UL>

<P><STRONG><a name="[44]"></a>Adc_Gpio_init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, gpio.o(i.Adc_Gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Adc_Gpio_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
</UL>

<P><STRONG><a name="[45]"></a>Adc_function_init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, adc.o(i.Adc_function_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Adc_function_init &rArr; ADC_GetCalibrationFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
</UL>

<P><STRONG><a name="[49]"></a>All_slow_check</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, common.o(i.All_slow_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = All_slow_check &rArr; Video_find_Origin_slow_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Origin_slow_check
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Panorama_find_end_point_slowChcek
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_find_Origin_slow_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>Angle_real_time_transmission</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, common.o(i.Angle_real_time_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Angle_real_time_transmission &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Absolute_value_calculation
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_HH_slowStartOrStop
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_origin_move
</UL>

<P><STRONG><a name="[8f]"></a>BLE_shut_start</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, standard.o(i.BLE_shut_start))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_countdown_time_display
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_main
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindOrigin_over_to_Sart
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spe_manul_Shuting
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manul_Turn_the_shuter
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_motorHH_pulse_check
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_start
</UL>

<P><STRONG><a name="[161]"></a>BLE_shut_stop</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, standard.o(i.BLE_shut_stop))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>Burn_code_value</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, pair.o(i.Burn_code_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Burn_code_value &rArr; NRF24L01_TxPacket &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TxAddr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RxAddr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_flash
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add22
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>Cancel_the_para_set_return</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, specialty_mode.o(i.Cancel_the_para_set_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cancel_the_para_set_return &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
</UL>

<P><STRONG><a name="[e1]"></a>Check_Buffer_Empty</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, common.o(i.Check_Buffer_Empty))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
</UL>

<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel4_5_IRQHandler &rArr; Usart22_Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DelayMode_FindABpoint_End</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timelapse.o(i.DelayMode_FindABpoint_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DelayMode_FindABpoint_End &rArr; Delay_mode_Dir_check
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_Dir_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>DelayMode_slowly_startedORstop</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, timelapse.o(i.DelayMode_slowly_startedORstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DelayMode_slowly_startedORstop
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_speed_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>Delay_FindABpoint_pluse_check</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timelapse.o(i.Delay_FindABpoint_pluse_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay_FindABpoint_pluse_check
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timelapse_loop_check
</UL>

<P><STRONG><a name="[120]"></a>Delay_FindABpoint_slow_check</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, timelapse.o(i.Delay_FindABpoint_slow_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Delay_FindABpoint_slow_check
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timelapse_loop_check
</UL>

<P><STRONG><a name="[6a]"></a>Delay_Max_amount_check</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timelapse.o(i.Delay_Max_amount_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Delay_Max_amount_check &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_set_abPoint
</UL>

<P><STRONG><a name="[6c]"></a>Delay_MotorHH_Start_check_diretion</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, timelapse.o(i.Delay_MotorHH_Start_check_diretion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_MotorHH_Start_check_diretion &rArr; set_abpoint_start_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_start_setting
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_led_tack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_start
</UL>

<P><STRONG><a name="[70]"></a>Delay_find_Origin_checkStop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timelapse.o(i.Delay_find_Origin_checkStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay_find_Origin_checkStop &rArr; Delay_mode_Dir_check
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_Dir_check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timelapse_loop_check
</UL>

<P><STRONG><a name="[4c]"></a>Delay_find_Origin_slow_check</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, timelapse.o(i.Delay_find_Origin_slow_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Delay_find_Origin_slow_check
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_slow_check
</UL>

<P><STRONG><a name="[71]"></a>Delay_get_data_from_controller</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, timelapse.o(i.Delay_get_data_from_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Delay_get_data_from_controller &rArr; Delay_move_speed_calculate &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_Dir_check
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_start
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_move_speed_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[64]"></a>Delay_mode_Dir_check</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, timelapse.o(i.Delay_mode_Dir_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_mode_Dir_check
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMode_FindABpoint_End
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_set_abPoint
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_get_data_from_controller
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_find_Origin_checkStop
</UL>

<P><STRONG><a name="[74]"></a>Delay_mode_find_Apoint</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, timelapse.o(i.Delay_mode_find_Apoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Delay_mode_find_Apoint &rArr; set_abpoint_start_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_start_setting
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_direction_change
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_led_tack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[9f]"></a>Delay_mode_para_clear</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, timelapse.o(i.Delay_mode_para_clear))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[76]"></a>Delay_motorHH_move_time_compara</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timelapse.o(i.Delay_motorHH_move_time_compara))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_motorHH_move_time_compara
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timelapse_loop_check
</UL>

<P><STRONG><a name="[72]"></a>Delay_move_speed_calculate</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, timelapse.o(i.Delay_move_speed_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Delay_move_speed_calculate &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_total_time_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_set_abPoint
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_get_data_from_controller
</UL>

<P><STRONG><a name="[7a]"></a>Delay_set_abPoint</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, timelapse.o(i.Delay_set_abPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Delay_set_abPoint &rArr; Delay_move_speed_calculate &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_total_time_calculate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_Dir_check
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_para_data_to_controller
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_SUM
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Absolute_value_calculation
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_move_speed_calculate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Max_amount_check
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_origin_OK
</UL>

<P><STRONG><a name="[79]"></a>Delay_total_time_calculate</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, timelapse.o(i.Delay_total_time_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Delay_total_time_calculate &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_set_abPoint
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_move_speed_calculate
</UL>

<P><STRONG><a name="[7d]"></a>Delete_mode_para</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, specialty_mode.o(i.Delete_mode_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delete_mode_para
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
</UL>

<P><STRONG><a name="[7e]"></a>Device_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.Device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Device_init &rArr; ble_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutter_gpio_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwr_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_gpio_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC22xx_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>Dma_SendIRQ_Dispose</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(i.Dma_SendIRQ_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Tx_Complete
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableIT_TC
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
</UL>

<P><STRONG><a name="[46]"></a>Dma_int</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, adc.o(i.Dma_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dma_int
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
</UL>

<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_press_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>FLASH_ErasePage</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>

<P><STRONG><a name="[8c]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[17a]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>

<P><STRONG><a name="[8b]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword
</UL>

<P><STRONG><a name="[179]"></a>FLASH_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>

<P><STRONG><a name="[8a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[57]"></a>Feed_IWDG</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Feed_IWDG))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uid
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_check
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_holfword
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_delay_ms
</UL>

<P><STRONG><a name="[8d]"></a>FindOrigin_over_to_Sart</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, specialty_mode.o(i.FindOrigin_over_to_Sart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FindOrigin_over_to_Sart &rArr; String_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_shut_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>GPIO_INUP_Init</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, gpio.o(i.GPIO_INUP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_INUP_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Irq_gpio_init
</UL>

<P><STRONG><a name="[91]"></a>GPIO_OUT_init</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, gpio.o(i.GPIO_OUT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_GPIO_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutter_gpio_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwr_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC22xx_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_init
</UL>

<P><STRONG><a name="[92]"></a>Get_data_from_controller</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, common.o(i.Get_data_from_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Get_data_from_controller &rArr; Set_origin_OK &rArr; Video_abPoint_set &rArr; Video_speed_calculate &rArr; MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_real_time_transmission
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wideAngle_Get_data_from_controller
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vidoe_mode_para_clear
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_Dir_check
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_para_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_para_clear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spe_mode_clear
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_para_clear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_mode_para_clear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Apoint
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_data_from_controller
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_Get_data_from_controller
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Send_reshot_to_controller
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp_para_start_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reshot_Clear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Panorama_mode_find_Apoint
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manul_Turn_the_shuter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_total_time_calculate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_para_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_find_Apoint
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_Dir_check
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_get_data_from_controller
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_origin_move
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_origin_OK
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manaul_speed_conversion
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_read_data
</UL>

<P><STRONG><a name="[114]"></a>Gpio_time_count</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.Gpio_time_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>Green_Led_Brightness</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gpio.o(i.Green_Led_Brightness))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>Green_led_onORoff</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio.o(i.Green_led_onORoff))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_pair_led
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_led_tack
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_flash
</UL>

<P><STRONG><a name="[f7]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[aa]"></a>HHmotor_return_to_theOrigin_start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, specialty_mode.o(i.HHmotor_return_to_theOrigin_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HHmotor_return_to_theOrigin_start &rArr; SpHHorizontal_start
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_start
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>Horizontal_pulse_goBack</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, specialty_mode.o(i.Horizontal_pulse_goBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Horizontal_pulse_goBack &rArr; specialty_mode_param_display &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_upORdown
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_param_display
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_loop_check
</UL>

<P><STRONG><a name="[af]"></a>Horizontal_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, standard.o(i.Horizontal_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Horizontal_start
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slow_time_data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_start
</UL>

<P><STRONG><a name="[b2]"></a>Irq_gpio_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rf24l01.o(i.Irq_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Irq_gpio_init &rArr; GPIO_INUP_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INUP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_GPIO_Init
</UL>

<P><STRONG><a name="[47]"></a>LL_GPIO_Init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwr_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_gpio_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_opendrain
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INUP_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Gpio_init
</UL>

<P><STRONG><a name="[b3]"></a>LL_Init1msTick</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b4]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[b8]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[c2]"></a>LL_TIM_Init</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f0xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[b9]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f0xx_ll_tim.o(i.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_TIM_OC_Init &rArr; OC4Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[be]"></a>LL_USART_Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32f0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_init
</UL>

<P><STRONG><a name="[81]"></a>Led_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gpio.o(i.Led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Led_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[122]"></a>LittleEndia_BigEndia_Interconvert_32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uid_encryption.o(i.LittleEndia_BigEndia_Interconvert_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LittleEndia_BigEndia_Interconvert_32
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_Encryption_Key_Check
</UL>

<P><STRONG><a name="[c4]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MX_USART2_UART_Init &rArr; Usart22_init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>Manaul_speed_conversion</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, common.o(i.Manaul_speed_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Manaul_speed_conversion &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_SUM
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[cc]"></a>Manu_mode_dir_check</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, common.o(i.Manu_mode_dir_check))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManulHH_mode_pulse_check
</UL>

<P><STRONG><a name="[c9]"></a>Manual_HH_slowStartOrStop</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, common.o(i.Manual_HH_slowStartOrStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Manual_HH_slowStartOrStop &rArr; Angle_real_time_transmission &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_real_time_transmission
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manaul_slow_timeSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>Manual_mode_dir_set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, common.o(i.Manual_mode_dir_set))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_origin_move
</UL>

<P><STRONG><a name="[cb]"></a>ManulHH_mode_pulse_check</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, common.o(i.ManulHH_mode_pulse_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ManulHH_mode_pulse_check
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manu_mode_dir_check
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>Manul_SartOrStop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, common.o(i.Manul_SartOrStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Manul_SartOrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_origin_move
</UL>

<P><STRONG><a name="[94]"></a>Manul_Turn_the_shuter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, standard.o(i.Manul_Turn_the_shuter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Manul_Turn_the_shuter &rArr; Spe_manul_Shuting
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spe_manul_Shuting
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_shut_start
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[cf]"></a>MotorHH_Video_compensation_check</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, video.o(i.MotorHH_Video_compensation_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MotorHH_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_move_time_check
</UL>

<P><STRONG><a name="[d0]"></a>MotorHH_Video_move_time_check</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, video.o(i.MotorHH_Video_move_time_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MotorHH_Video_move_time_check &rArr; MotorHH_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_ram_load
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Times_convert_to_speed
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_compensation_check
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_FindABpoint_End
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_data_from_controller
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_speed_calculate
</UL>

<P><STRONG><a name="[d4]"></a>MotorVV_Video_compensation_check</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, video.o(i.MotorVV_Video_compensation_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_move_time_check
</UL>

<P><STRONG><a name="[d5]"></a>MotorVV_Video_move_time_check</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, video.o(i.MotorVV_Video_move_time_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_ram_load
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Times_convert_to_speed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_compensation_check
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_FindABpoint_End
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_data_from_controller
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_speed_calculate
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>NRF24L01_Clear_IRQ_Flag</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rf24l01.o(i.NRF24L01_Clear_IRQ_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NRF24L01_Clear_IRQ_Flag &rArr; NRF24L01_Read_Status_Register &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Status_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
</UL>

<P><STRONG><a name="[d9]"></a>NRF24L01_Read_Buf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, rf24l01.o(i.NRF24L01_Read_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NRF24L01_Read_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_check
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
</UL>

<P><STRONG><a name="[da]"></a>NRF24L01_Read_Reg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rf24l01.o(i.NRF24L01_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01_Read_Reg &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_send_data
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
</UL>

<P><STRONG><a name="[d7]"></a>NRF24L01_Read_Status_Register</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rf24l01.o(i.NRF24L01_Read_Status_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01_Read_Status_Register &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Clear_IRQ_Flag
</UL>

<P><STRONG><a name="[58]"></a>NRF24L01_RxPacket</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rf24l01.o(i.NRF24L01_RxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NRF24L01_RxPacket &rArr; NRF24L01_Read_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_read_data
</UL>

<P><STRONG><a name="[54]"></a>NRF24L01_Set_RxAddr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rf24l01.o(i.NRF24L01_Set_RxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NRF24L01_Set_RxAddr &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
</UL>

<P><STRONG><a name="[53]"></a>NRF24L01_Set_TxAddr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf24l01.o(i.NRF24L01_Set_TxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NRF24L01_Set_TxAddr &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
</UL>

<P><STRONG><a name="[5d]"></a>NRF24L01_TxPacket</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rf24l01.o(i.NRF24L01_TxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NRF24L01_TxPacket &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_send_data
</UL>

<P><STRONG><a name="[dc]"></a>NRF24L01_Write_Buf</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rf24l01.o(i.NRF24L01_Write_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_check
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TxAddr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RxAddr
</UL>

<P><STRONG><a name="[52]"></a>NRF24L01_Write_Reg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rf24l01.o(i.NRF24L01_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01_Write_Reg &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sleep
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
</UL>

<P><STRONG><a name="[dd]"></a>NRF24L01_check</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, rf24l01.o(i.NRF24L01_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NRF24L01_check &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
</UL>

<P><STRONG><a name="[de]"></a>Nrf24L01_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rf24l01.o(i.Nrf24L01_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Nrf24L01_init &rArr; NRF24L01_check &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_GPIO_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_send_data
</UL>

<P><STRONG><a name="[7b]"></a>PULSE_SUM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, common.o(i.PULSE_SUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wide_get_countdown_time
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_countdown_time
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_abPoint_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_set_abPoint
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manaul_speed_conversion
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_parameter_calculate
</UL>

<P><STRONG><a name="[50]"></a>Package_dataBufer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, common.o(i.Package_dataBufer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart11_Interval_set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Buffer_Empty
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_real_time_transmission
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_param_display
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_find_the_Apoint_tag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Send_reshot_to_controller
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_total_time_calculate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_send_to_controller
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_para_data_to_controller
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_countdwon_display
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_param_display
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_modeID_sendt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Send_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cancel_the_para_set_return
</UL>

<P><STRONG><a name="[116]"></a>Pairing_time</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pair.o(i.Pairing_time))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>Panorama_find_end_point_checkStop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, standard.o(i.Panorama_find_end_point_checkStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Panorama_find_end_point_checkStop &rArr; Send_find_the_Apoint_tag &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_find_the_Apoint_tag
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_loop_check
</UL>

<P><STRONG><a name="[4a]"></a>Panorama_find_end_point_slowChcek</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, standard.o(i.Panorama_find_end_point_slowChcek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Panorama_find_end_point_slowChcek
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_slow_check
</UL>

<P><STRONG><a name="[a3]"></a>Panorama_mode_find_Apoint</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, standard.o(i.Panorama_mode_find_Apoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Panorama_mode_find_Apoint &rArr; Send_find_the_Apoint_tag &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_start_setting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_find_the_Apoint_tag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[b7]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[b5]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[e5]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[df]"></a>RF24L01_GPIO_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rf24l01.o(i.RF24L01_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RF24L01_GPIO_Init &rArr; Irq_gpio_init &rArr; GPIO_INUP_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Irq_gpio_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INUP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
</UL>

<P><STRONG><a name="[e0]"></a>RF24L01_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, rf24l01.o(i.RF24L01_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RF24L01_Init &rArr; NRF24L01_Set_TxAddr &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TxAddr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RxAddr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Clear_IRQ_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
</UL>

<P><STRONG><a name="[56]"></a>RF24L01_Set_Mode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rf24l01.o(i.RF24L01_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RF24L01_Set_Mode &rArr; NRF24L01_Write_Reg &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_send_data
</UL>

<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>Ramp_Speed_Load</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, motor.o(i.Ramp_Speed_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Ramp_Speed_Load &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed_and_ramp_time
</UL>

<P><STRONG><a name="[e7]"></a>Read_versions</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bootloader.o(i.Read_versions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_versions &rArr; String_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
</UL>

<P><STRONG><a name="[6f]"></a>Red_led_tack</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, common.o(i.Red_led_tack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Red_led_tack
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_led_onORoff
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_main
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Apoint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_find_Apoint
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MotorHH_Start_check_diretion
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorVV_Start_check_diretion
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorHH_Start_check_diretion
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_first_begin
</UL>

<P><STRONG><a name="[87]"></a>Reset_Tx_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.Reset_Tx_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[f6]"></a>Reset_theSystem</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, low_power.o(i.Reset_theSystem))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[a5]"></a>Reshot_Clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, specialty_mode.o(i.Reshot_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
</UL>

<P><STRONG><a name="[e9]"></a>Reshot_move</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, specialty_mode.o(i.Reshot_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reshot_move &rArr; SpHHorizontal_start
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_start
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
</UL>

<P><STRONG><a name="[ea]"></a>Reshot_pulses_check_stop</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, specialty_mode.o(i.Reshot_pulses_check_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reshot_pulses_check_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_loop_check
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>Send_connect_data_to_controller</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, common.o(i.Send_connect_data_to_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Send_connect_data_to_controller &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wideAngle_Get_data_from_controller
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_data_from_controller
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_Get_data_from_controller
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_motorHH_pulse_check
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_move_times_limit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Origin_checkStop
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Fastest_time_check
</UL>

<P><STRONG><a name="[e4]"></a>Send_find_the_Apoint_tag</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, standard.o(i.Send_find_the_Apoint_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Send_find_the_Apoint_tag &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Panorama_find_end_point_checkStop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Panorama_mode_find_Apoint
</UL>

<P><STRONG><a name="[7c]"></a>Send_para_data_to_controller</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, common.o(i.Send_para_data_to_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Send_para_data_to_controller &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_abPoint_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_set_abPoint
</UL>

<P><STRONG><a name="[16f]"></a>Set_RX_Complete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.Set_RX_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receiver
</UL>

<P><STRONG><a name="[158]"></a>Set_adc_back</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.Set_adc_back))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
</UL>

<P><STRONG><a name="[93]"></a>Set_origin_OK</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, common.o(i.Set_origin_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Set_origin_OK &rArr; Video_abPoint_set &rArr; Video_speed_calculate &rArr; MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_abPoint_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_set_abPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[98]"></a>Set_origin_move</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, common.o(i.Set_origin_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Set_origin_move &rArr; Angle_real_time_transmission &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_real_time_transmission
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_direction_change
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manul_SartOrStop
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_mode_dir_set
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[ee]"></a>ShutDown</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, low_power.o(i.ShutDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ShutDown &rArr; ShutDown_AllIO_High_resistance_mode &rArr; input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sleep
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutter_processing
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_motor_pwr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrKey_exti_interrupt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown_AllIO_High_resistance_mode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_theSystem
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_the_powers_status
</UL>

<P><STRONG><a name="[f4]"></a>ShutDown_AllIO_High_resistance_mode</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gpio.o(i.ShutDown_AllIO_High_resistance_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ShutDown_AllIO_High_resistance_mode &rArr; input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_opendrain
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[fb]"></a>SpHHmotor_slowly_startedORstop</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, specialty_mode.o(i.SpHHmotor_slowly_startedORstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpHHmotor_slowly_startedORstop
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slow_time_data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>SpHHorizontal_slow_check</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, specialty_mode.o(i.SpHHorizontal_slow_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpHHorizontal_slow_check
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_upORdown
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slow_time_data
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_loop_check
</UL>

<P><STRONG><a name="[ab]"></a>SpHHorizontal_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, specialty_mode.o(i.SpHHorizontal_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpHHorizontal_start
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_upORdown
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slow_time_data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_main
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_first_begin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reshot_move
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HHmotor_return_to_theOrigin_start
</UL>

<P><STRONG><a name="[fd]"></a>SpResot_slow_check</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, specialty_mode.o(i.SpResot_slow_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpResot_slow_check
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_upORdown
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slow_time_data
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_loop_check
</UL>

<P><STRONG><a name="[fe]"></a>SpVVertical_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, specialty_mode.o(i.SpVVertical_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpVVertical_start
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_start
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_speed_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpVVset_slow_time_data
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
</UL>

<P><STRONG><a name="[ff]"></a>SpVVset_slow_time_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, specialty_mode.o(i.SpVVset_slow_time_data))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpVVertical_start
</UL>

<P><STRONG><a name="[a2]"></a>Sp_para_start_init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, specialty_mode.o(i.Sp_para_start_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Sp_para_start_init &rArr; specialty_parameter_calculate &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_parameter_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
</UL>

<P><STRONG><a name="[ce]"></a>Spe_manul_Shuting</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, specialty_mode.o(i.Spe_manul_Shuting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Spe_manul_Shuting
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_shut_start
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manul_Turn_the_shuter
</UL>

<P><STRONG><a name="[101]"></a>SpecialtyHH_Ramp_Speed_Load</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, specialty_mode.o(i.SpecialtyHH_Ramp_Speed_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SpecialtyHH_Ramp_Speed_Load &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_main
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
</UL>

<P><STRONG><a name="[97]"></a>Specialty_Get_data_from_controller</STRONG> (Thumb, 506 bytes, Stack size 16 bytes, specialty_mode.o(i.Specialty_Get_data_from_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Specialty_Get_data_from_controller &rArr; Specialty_mode_Start &rArr; Sp_para_start_init &rArr; specialty_parameter_calculate &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_write_flash
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spe_mode_clear
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_stop
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reshot_Clear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Panorama_mode_find_Apoint
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_parameter_calculate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialtyHH_Ramp_Speed_Load
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reshot_move
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_mode_para
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cancel_the_para_set_return
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[103]"></a>Specialty_Key_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, specialty_mode.o(i.Specialty_Key_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Specialty_Key_start &rArr; Specialty_mode_Start &rArr; Sp_para_start_init &rArr; specialty_parameter_calculate &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_modeID_sendt
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[105]"></a>Specialty_Send_data</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, specialty_mode.o(i.Specialty_Send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Specialty_Send_data &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_data_for_controller
</UL>

<P><STRONG><a name="[a4]"></a>Specialty_Send_reshot_to_controller</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, specialty_mode.o(i.Specialty_Send_reshot_to_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Specialty_Send_reshot_to_controller &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_data_for_controller
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
</UL>

<P><STRONG><a name="[106]"></a>Specialty_first_begin</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, specialty_mode.o(i.Specialty_first_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Specialty_first_begin &rArr; Red_led_tack
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_led_tack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leve_turn_on_shutter
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_start
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
</UL>

<P><STRONG><a name="[108]"></a>Specialty_loop_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, specialty_mode.o(i.Specialty_loop_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Specialty_loop_check &rArr; Panorama_find_end_point_checkStop &rArr; Send_find_the_Apoint_tag &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Panorama_find_end_point_checkStop
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speialty_Horizontal_pulse_check
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpResot_slow_check
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_slow_check
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reshot_pulses_check_stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_pulse_goBack
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>Specialty_modeID_sendt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, specialty_mode.o(i.Specialty_modeID_sendt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Specialty_modeID_sendt &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_data_for_controller
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Key_start
</UL>

<P><STRONG><a name="[102]"></a>Specialty_mode_Start</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, specialty_mode.o(i.Specialty_mode_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Specialty_mode_Start &rArr; Sp_para_start_init &rArr; specialty_parameter_calculate &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_stop
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Send_reshot_to_controller
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp_para_start_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_first_begin
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialtyHH_Ramp_Speed_Load
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpVVertical_start
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_start
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_countdown_time_display
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Key_start
</UL>

<P><STRONG><a name="[109]"></a>Speialty_Horizontal_pulse_check</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, specialty_mode.o(i.Speialty_Horizontal_pulse_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Speialty_Horizontal_pulse_check
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_loop_check
</UL>

<P><STRONG><a name="[96]"></a>Standard_Get_data_from_controller</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, standard.o(i.Standard_Get_data_from_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Standard_Get_data_from_controller &rArr; get_countdown_time &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_param_display
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_countdown_time
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_para_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[8e]"></a>String_Printf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart.o(i.String_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = String_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_send_byte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableIT_TC
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_versions
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindOrigin_over_to_Sart
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_read_data
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_enter_boot_if
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
</UL>

<P><STRONG><a name="[111]"></a>Sync_data_for_controller</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, specialty_mode.o(i.Sync_data_for_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sync_data_for_controller &rArr; Specialty_Send_data &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Send_reshot_to_controller
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_modeID_sendt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>SystemClock_Config</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemClock_Config &rArr; LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>TIM14_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM14_IRQHandler &rArr; standard_countdown_time_display &rArr; Specialty_mode_Start &rArr; Sp_para_start_init &rArr; specialty_parameter_calculate &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_count
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_countdown_time_display
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_interval_count
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_cycle_count
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_time_countdwon
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_shut_time_count
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_cout
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pairing_time
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_time_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM3_IRQHandler &rArr; Video_loop_check &rArr; video_motorHH_pulse_check &rArr; Send_connect_data_to_controller &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_pulse_count
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_ToUpdata_timer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_loop_check
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timelapse_loop_check
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_loop_check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManulHH_mode_pulse_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_Led_Brightness
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TMC22xx_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(i.TMC22xx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TMC22xx_Init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[11e]"></a>Timelapse_loop_check</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timelapse.o(i.Timelapse_loop_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timelapse_loop_check &rArr; Delay_find_Origin_checkStop &rArr; Delay_mode_Dir_check
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_motorHH_move_time_compara
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_find_Origin_checkStop
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_FindABpoint_slow_check
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_FindABpoint_pluse_check
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>Times_convert_to_speed</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, video.o(i.Times_convert_to_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Times_convert_to_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_move_time_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_move_time_check
</UL>

<P><STRONG><a name="[121]"></a>UID_Encryption_Key_Check</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, uid_encryption.o(i.UID_Encryption_Key_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UID_Encryption_Key_Check &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LittleEndia_BigEndia_Interconvert_32
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uid
</UL>

<P><STRONG><a name="[1d]"></a>USART1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; usart1_receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receiver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USART2_IRQHandler &rArr; usart22_read_byte &rArr; usart22_Recdata_Handling &rArr; bootloader_action_if &rArr; enter_bootloader &rArr; write_bootTag &rArr; write_flash_holfword_buffer &rArr; write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_read_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>Usart11_Interval_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.Usart11_Interval_set))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
</UL>

<P><STRONG><a name="[62]"></a>Usart22_Dma_SendIRQ_Dispose</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.Usart22_Dma_SendIRQ_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart22_Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Reset_Tx_Complete
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableIT_TC
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>Usart22_Receiver</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.Usart22_Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart22_Receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_GetDataLength
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_read_byte
</UL>

<P><STRONG><a name="[126]"></a>Usart22_Reset_Tx_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.Usart22_Reset_Tx_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[c5]"></a>Usart22_init</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, uart.o(i.Usart22_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Usart22_init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[135]"></a>Vertical_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, standard.o(i.Vertical_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vertical_start
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_start
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_start
</UL>

<P><STRONG><a name="[136]"></a>Video_Fastest_time_check</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, video.o(i.Video_Fastest_time_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Video_Fastest_time_check &rArr; calculate_fast_speed &rArr; Video_ram_load &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_calculat
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_speed_calculate
</UL>

<P><STRONG><a name="[138]"></a>Video_FindABpoint_End</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, video.o(i.Video_FindABpoint_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Video_FindABpoint_End &rArr; MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_Dir_check
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_move_time_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_move_time_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>Video_FindABpoint_pluse_check</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, video.o(i.Video_FindABpoint_pluse_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Video_FindABpoint_pluse_check
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_loop_check
</UL>

<P><STRONG><a name="[144]"></a>Video_FindABpoint_slow_check</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, video.o(i.Video_FindABpoint_slow_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Video_FindABpoint_slow_check
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_loop_check
</UL>

<P><STRONG><a name="[95]"></a>Video_Get_data_from_controller</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, video.o(i.Video_Get_data_from_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Video_Get_data_from_controller &rArr; MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_Dir_check
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_start
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_move_times_limit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorVV_Start_check_diretion
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorHH_Start_check_diretion
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_move_time_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_move_time_check
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[13c]"></a>Video_MotorHH_Start_check_diretion</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, video.o(i.Video_MotorHH_Start_check_diretion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Video_MotorHH_Start_check_diretion &rArr; set_abpoint_start_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_start_setting
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_led_tack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_data_from_controller
</UL>

<P><STRONG><a name="[13e]"></a>Video_MotorHH_slowly_startedORstop</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, video.o(i.Video_MotorHH_slowly_startedORstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Video_MotorHH_slowly_startedORstop
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>Video_MotorVV_Start_check_diretion</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, video.o(i.Video_MotorVV_Start_check_diretion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Video_MotorVV_Start_check_diretion &rArr; set_abpoint_start_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_start_setting
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_direction_change
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_led_tack
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_data_from_controller
</UL>

<P><STRONG><a name="[eb]"></a>Video_abPoint_set</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, video.o(i.Video_abPoint_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Video_abPoint_set &rArr; Video_speed_calculate &rArr; MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_Dir_check
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_para_data_to_controller
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_SUM
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Absolute_value_calculation
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_speed_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_origin_OK
</UL>

<P><STRONG><a name="[140]"></a>Video_compensation_change_speed</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, video.o(i.Video_compensation_change_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Video_compensation_change_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_speed_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_loop_check
</UL>

<P><STRONG><a name="[9b]"></a>Video_find_Apoint</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, video.o(i.Video_find_Apoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Video_find_Apoint &rArr; set_abpoint_start_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_start_setting
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_Dir_check
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_direction_change
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_led_tack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[141]"></a>Video_find_Origin_checkStop</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, video.o(i.Video_find_Origin_checkStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Video_find_Origin_checkStop &rArr; Send_connect_data_to_controller &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_Dir_check
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_loop_check
</UL>

<P><STRONG><a name="[4b]"></a>Video_find_Origin_slow_check</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, video.o(i.Video_find_Origin_slow_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Video_find_Origin_slow_check
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_slow_check
</UL>

<P><STRONG><a name="[11d]"></a>Video_loop_check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, video.o(i.Video_loop_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Video_loop_check &rArr; video_motorHH_pulse_check &rArr; Send_connect_data_to_controller &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_motorHH_pulse_check
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_slow_pulse_check
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Origin_checkStop
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_compensation_change_speed
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_FindABpoint_slow_check
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_FindABpoint_pluse_check
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>Video_mode_para_clear</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, video.o(i.Video_mode_para_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Video_mode_para_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[145]"></a>Video_motorHH_start</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, video.o(i.Video_motorHH_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Video_motorHH_start
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_start
</UL>

<P><STRONG><a name="[146]"></a>Video_motorVV_start</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, video.o(i.Video_motorVV_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Video_motorVV_start
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_stop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_start
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_start
</UL>

<P><STRONG><a name="[13b]"></a>Video_move_times_limit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, video.o(i.Video_move_times_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Video_move_times_limit &rArr; Send_connect_data_to_controller &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_data_from_controller
</UL>

<P><STRONG><a name="[d2]"></a>Video_ram_load</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, video.o(i.Video_ram_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Video_ram_load &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_move_time_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_move_time_check
</UL>

<P><STRONG><a name="[143]"></a>Video_slow_pulse_check</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, video.o(i.Video_slow_pulse_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Video_slow_pulse_check
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_loop_check
</UL>

<P><STRONG><a name="[13f]"></a>Video_speed_calculate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, video.o(i.Video_speed_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Video_speed_calculate &rArr; MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Fastest_time_check
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_move_time_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_move_time_check
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_abPoint_set
</UL>

<P><STRONG><a name="[139]"></a>Video_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, video.o(i.Video_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Video_start &rArr; Video_motorVV_start
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_shut_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motorVV_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motorHH_start
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_FindABpoint_End
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_data_from_controller
</UL>

<P><STRONG><a name="[41]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[18d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[112]"></a>adc_cout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.adc_cout))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>battery_send_to_controller</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, common.o(i.battery_send_to_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = battery_send_to_controller &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
</UL>

<P><STRONG><a name="[82]"></a>ble_init</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, gpio.o(i.ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ble_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[119]"></a>ble_shut_time_count</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, standard.o(i.ble_shut_time_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>bluetooth_pair_led</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, gpio.o(i.bluetooth_pair_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bluetooth_pair_led
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_led_onORoff
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>bootloader_action_if</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bootloader.o(i.bootloader_action_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = bootloader_action_if &rArr; enter_bootloader &rArr; write_bootTag &rArr; write_flash_holfword_buffer &rArr; write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_lengt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_bootloader
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
</UL>

<P><STRONG><a name="[d1]"></a>calculate_fast_speed</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, video.o(i.calculate_fast_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = calculate_fast_speed &rArr; Video_ram_load &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_ram_load
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Fastest_time_check
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVV_Video_move_time_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorHH_Video_move_time_check
</UL>

<P><STRONG><a name="[14d]"></a>calculate_fast_speed_and_ramp_time</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, motor.o(i.calculate_fast_speed_and_ramp_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = calculate_fast_speed_and_ramp_time &rArr; Ramp_Speed_Load &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp_Speed_Load
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wide_get_countdown_time
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_countdown_time
</UL>

<P><STRONG><a name="[14e]"></a>check_enter_boot_if</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bootloader.o(i.check_enter_boot_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_enter_boot_if &rArr; String_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
</UL>

<P><STRONG><a name="[4f]"></a>check_sum_add</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common.o(i.check_sum_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_real_time_transmission
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_param_display
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_find_the_Apoint_tag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Send_reshot_to_controller
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_total_time_calculate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_send_to_controller
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_para_data_to_controller
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_countdwon_display
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_param_display
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_modeID_sendt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Send_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cancel_the_para_set_return
</UL>

<P><STRONG><a name="[5c]"></a>check_sum_add22</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pair.o(i.check_sum_add22))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sum_add22
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
</UL>

<P><STRONG><a name="[14f]"></a>check_the_powers_status</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, keyscan.o(i.check_the_powers_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = check_the_powers_status &rArr; ShutDown &rArr; ShutDown_AllIO_High_resistance_mode &rArr; input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[150]"></a>check_uid</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, flash.o(i.check_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = check_uid &rArr; UID_Encryption_Key_Check &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_Encryption_Key_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>checksum_verify</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(i.checksum_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checksum_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_read_data
</UL>

<P><STRONG><a name="[151]"></a>delay_mode_countdwon_display</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timelapse.o(i.delay_mode_countdwon_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_mode_countdwon_display &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_time_countdwon
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
</UL>

<P><STRONG><a name="[152]"></a>delay_mode_main</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, timelapse.o(i.delay_mode_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = delay_mode_main &rArr; delay_mode_countdwon_display &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_shut_start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_Dir_check
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_led_tack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_countdwon_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>delay_mode_para_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timelapse.o(i.delay_mode_para_clear))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[73]"></a>delay_mode_start</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timelapse.o(i.delay_mode_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = delay_mode_start &rArr; Delay_MotorHH_Start_check_diretion &rArr; set_abpoint_start_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_move_para_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MotorHH_Start_check_diretion
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_get_data_from_controller
</UL>

<P><STRONG><a name="[11a]"></a>delay_mode_time_countdwon</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, timelapse.o(i.delay_mode_time_countdwon))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delay_mode_time_countdwon &rArr; delay_mode_countdwon_display &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_countdwon_display
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>delay_move_para_get</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, timelapse.o(i.delay_move_para_get))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_start
</UL>

<P><STRONG><a name="[f0]"></a>disable_interrupt</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, low_power.o(i.disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disable_interrupt &rArr; Dma_SendIRQ_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[d8]"></a>drv_spi_read_write_byte</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rf24l01.o(i.drv_spi_read_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Status_Register
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Clear_IRQ_Flag
</UL>

<P><STRONG><a name="[f9]"></a>enable_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, low_power.o(i.enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[14c]"></a>enter_bootloader</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bootloader.o(i.enter_bootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = enter_bootloader &rArr; write_bootTag &rArr; write_flash_holfword_buffer &rArr; write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bootTag
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
</UL>

<P><STRONG><a name="[156]"></a>filtering</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, adc.o(i.filtering))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = filtering &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_adc_back
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
</UL>

<P><STRONG><a name="[10a]"></a>get_countdown_time</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, standard.o(i.get_countdown_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_countdown_time &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_calculat
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed_and_ramp_time
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_SUM
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_Get_data_from_controller
</UL>

<P><STRONG><a name="[5a]"></a>if_write_flash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash.o(i.if_write_flash))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
</UL>

<P><STRONG><a name="[fa]"></a>input_opendrain</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, gpio.o(i.input_opendrain))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown_AllIO_High_resistance_mode
</UL>

<P><STRONG><a name="[15b]"></a>key_Handle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, keyscan.o(i.key_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[84]"></a>key_gpio_init</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, gpio.o(i.key_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = key_gpio_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[159]"></a>keyscan</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, keyscan.o(i.keyscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = keyscan &rArr; Specialty_Key_start &rArr; Specialty_mode_Start &rArr; Sp_para_start_init &rArr; specialty_parameter_calculate &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Key_start
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_key_continue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_Handle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_the_powers_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>leve_turn_on_shutter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, specialty_mode.o(i.leve_turn_on_shutter))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_first_begin
</UL>

<P><STRONG><a name="[55]"></a>lights_flash</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pair.o(i.lights_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lights_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_led_onORoff
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
</UL>

<P><STRONG><a name="[15c]"></a>limit_angle_360</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, video.o(i.limit_angle_360))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = limit_angle_360
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; wifi24G_data_Dispose &rArr; wifi24G_read_data &rArr; Get_data_from_controller &rArr; Set_origin_OK &rArr; Video_abPoint_set &rArr; Video_speed_calculate &rArr; MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_data_Dispose
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_main
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_slow_stopORstart
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_angle_360
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uid
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_pair_led
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorHH_slowly_startedORstop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_FindABpoint_End
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_data_for_controller
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHmotor_slowly_startedORstop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_HH_slowStartOrStop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindOrigin_over_to_Sart
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMode_slowly_startedORstop
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMode_FindABpoint_End
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_shut_stop
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_real_time_transmission
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_slow_check
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_d_c_int
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ca]"></a>manaul_slow_timeSet</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, common.o(i.manaul_slow_timeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = manaul_slow_timeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_HH_slowStartOrStop
</UL>

<P><STRONG><a name="[11b]"></a>motorHH_ToUpdata_timer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, motorh.o(i.motorHH_ToUpdata_timer))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>motorHH_direction_change</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motorh.o(i.motorHH_direction_change))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_Dir_check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Apoint
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Panorama_mode_find_Apoint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_find_Apoint
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_Dir_check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_origin_move
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MotorHH_Start_check_diretion
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorHH_Start_check_diretion
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speialty_Horizontal_pulse_check
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_first_begin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reshot_move
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HHmotor_return_to_theOrigin_start
</UL>

<P><STRONG><a name="[11c]"></a>motorHH_pulse_count</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, motorh.o(i.motorHH_pulse_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = motorHH_pulse_count
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>motorHH_speed_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, motorh.o(i.motorHH_speed_set))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_slow_stopORstart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorHH_slowly_startedORstop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHmotor_slowly_startedORstop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_HH_slowStartOrStop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMode_slowly_startedORstop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_start_setting
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_start
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manul_SartOrStop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motorHH_start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_compensation_change_speed
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_start
</UL>

<P><STRONG><a name="[b1]"></a>motorHH_start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motorh.o(i.motorHH_start))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_start_setting
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_start
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manul_SartOrStop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motorHH_start
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_start
</UL>

<P><STRONG><a name="[69]"></a>motorHH_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motorh.o(i.motorHH_stop))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_angle_360
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorHH_slowly_startedORstop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_HH_slowStartOrStop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_start
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Panorama_find_end_point_checkStop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_motorHH_move_time_compara
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_find_Origin_checkStop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_FindABpoint_pluse_check
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_motorHH_pulse_check
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motorHH_start
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Origin_checkStop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_FindABpoint_pluse_check
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speialty_Horizontal_pulse_check
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reshot_pulses_check_stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_pulse_goBack
</UL>

<P><STRONG><a name="[75]"></a>motorVV_direction_change</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motorv.o(i.motorVV_direction_change))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_Dir_check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Apoint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_find_Apoint
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_origin_move
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorVV_Start_check_diretion
</UL>

<P><STRONG><a name="[67]"></a>motorVV_speed_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, motorv.o(i.motorVV_speed_set))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_abpoint_slow_stopORstart
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMode_slowly_startedORstop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motorVV_start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_compensation_change_speed
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpVVertical_start
</UL>

<P><STRONG><a name="[ed]"></a>motorVV_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motorv.o(i.motorVV_start))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_start
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_origin_move
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motorVV_start
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpVVertical_start
</UL>

<P><STRONG><a name="[9c]"></a>motorVV_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motorv.o(i.motorVV_stop))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_angle_360
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_mode_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_motorVV_start
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Origin_checkStop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_FindABpoint_pluse_check
</UL>

<P><STRONG><a name="[15e]"></a>motor_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, motor.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = motor_init &rArr; para_read_from_flash &rArr; read_flash_holfword
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_para_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>motor_pwr_init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, gpio.o(i.motor_pwr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = motor_pwr_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_motor_pwr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[167]"></a>para_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, common.o(i.para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
</UL>

<P><STRONG><a name="[165]"></a>para_init_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common.o(i.para_init_set))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[164]"></a>para_read_from_flash</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flash.o(i.para_read_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = para_read_from_flash &rArr; read_flash_holfword
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_holfword
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[169]"></a>percentage_get</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, adc.o(i.percentage_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = percentage_get &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC_value
</UL>

<P><STRONG><a name="[15a]"></a>press_key_continue</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, keyscan.o(i.press_key_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = press_key_continue &rArr; ShutDown &rArr; ShutDown_AllIO_High_resistance_mode &rArr; input_opendrain &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>

<P><STRONG><a name="[f5]"></a>pwrKey_exti_interrupt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.pwrKey_exti_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwrKey_exti_interrupt &rArr; LL_SYSCFG_SetEXTISource
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSCFG_SetEXTISource
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[15f]"></a>read_ADC_value</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, adc.o(i.read_ADC_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = read_ADC_value &rArr; filtering &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentage_get
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtering
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_send_to_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>read_flash_holfword</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, flash.o(i.read_flash_holfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_flash_holfword
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_read_from_flash
</UL>

<P><STRONG><a name="[176]"></a>return_checksum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bootloader.o(i.return_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bootTag
</UL>

<P><STRONG><a name="[113]"></a>scan_cycle_count</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, keyscan.o(i.scan_cycle_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>send_interval_count</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(i.send_interval_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>set_abpoint_slow_stopORstart</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, common.o(i.set_abpoint_slow_stopORstart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = set_abpoint_slow_stopORstart &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_speed_set
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>set_abpoint_start_setting</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, video.o(i.set_abpoint_start_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_abpoint_start_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Apoint
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Panorama_mode_find_Apoint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mode_find_Apoint
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MotorHH_Start_check_diretion
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorVV_Start_check_diretion
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_MotorHH_Start_check_diretion
</UL>

<P><STRONG><a name="[88]"></a>set_press_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keyscan.o(i.set_press_time))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>set_slow_time_data</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, common.o(i.set_slow_time_data))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHmotor_slowly_startedORstop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpResot_slow_check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_slow_check
</UL>

<P><STRONG><a name="[f2]"></a>shutdown_motor_pwr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.shutdown_motor_pwr))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pwr_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[83]"></a>shutter_gpio_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(i.shutter_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = shutter_gpio_init &rArr; GPIO_OUT_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_init
</UL>

<P><STRONG><a name="[f3]"></a>shutter_processing</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.shutter_processing))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[ae]"></a>slider_upORdown</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common.o(i.slider_upORdown))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpResot_slow_check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_slow_check
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_pulse_goBack
</UL>

<P><STRONG><a name="[166]"></a>sp_para_init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, specialty_mode.o(i.sp_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sp_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[a0]"></a>spe_mode_clear</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, specialty_mode.o(i.spe_mode_clear))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
</UL>

<P><STRONG><a name="[162]"></a>specialty_mode_main</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, specialty_mode.o(i.specialty_mode_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = specialty_mode_main &rArr; SpecialtyHH_Ramp_Speed_Load &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_shut_start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Panorama_mode_find_Apoint
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_led_tack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_param_display
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialtyHH_Ramp_Speed_Load
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpHHorizontal_start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HHmotor_return_to_theOrigin_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>specialty_mode_para_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, specialty_mode.o(i.specialty_mode_para_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = specialty_mode_para_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[ad]"></a>specialty_mode_param_display</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, specialty_mode.o(i.specialty_mode_param_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = specialty_mode_param_display &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialty_mode_main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_pulse_goBack
</UL>

<P><STRONG><a name="[100]"></a>specialty_parameter_calculate</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, specialty_mode.o(i.specialty_parameter_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = specialty_parameter_calculate &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_SUM
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp_para_start_init
</UL>

<P><STRONG><a name="[137]"></a>speed_calculat</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motor.o(i.speed_calculat))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wide_get_countdown_time
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_countdown_time
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Fastest_time_check
</UL>

<P><STRONG><a name="[118]"></a>standard_countdown_time_display</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, standard.o(i.standard_countdown_time_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = standard_countdown_time_display &rArr; Specialty_mode_Start &rArr; Sp_para_start_init &rArr; specialty_parameter_calculate &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_mode_Start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_param_display
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_shut_start
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>standard_mode_para_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, standard.o(i.standard_mode_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_Get_data_from_controller
</UL>

<P><STRONG><a name="[10b]"></a>standard_mode_param_display</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, standard.o(i.standard_mode_param_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = standard_mode_param_display &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum_add
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_dataBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_countdown_time_display
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wideAngle_Get_data_from_controller
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_Get_data_from_controller
</UL>

<P><STRONG><a name="[10c]"></a>standard_mode_start</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, standard.o(i.standard_mode_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = standard_mode_start &rArr; standard_mode_param_display &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_param_display
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_start
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_shut_start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wideAngle_Get_data_from_controller
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_Get_data_from_controller
</UL>

<P><STRONG><a name="[14a]"></a>string_lengt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bootloader.o(i.string_lengt))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
</UL>

<P><STRONG><a name="[117]"></a>time_count</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, common.o(i.time_count))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>time_delay_ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, common.o(i.time_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
</UL>

<P><STRONG><a name="[124]"></a>usart1_receiver</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.usart1_receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart1_receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RX_Complete
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_GetDataLength
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>usart1_send_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.usart1_send_byte))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
</UL>

<P><STRONG><a name="[170]"></a>usart22_Recdata_Handling</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uart.o(i.usart22_Recdata_Handling))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = usart22_Recdata_Handling &rArr; bootloader_action_if &rArr; enter_bootloader &rArr; write_bootTag &rArr; write_flash_holfword_buffer &rArr; write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_versions
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_enter_boot_if
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_action_if
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_read_byte
</UL>

<P><STRONG><a name="[125]"></a>usart22_read_byte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(i.usart22_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usart22_read_byte &rArr; usart22_Recdata_Handling &rArr; bootloader_action_if &rArr; enter_bootloader &rArr; write_bootTag &rArr; write_flash_holfword_buffer &rArr; write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>video_Dir_check</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, video.o(i.video_Dir_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = video_Dir_check
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorVV_direction_change
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_direction_change
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_FindABpoint_End
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Apoint
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_abPoint_set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_Get_data_from_controller
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_motorHH_pulse_check
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_find_Origin_checkStop
</UL>

<P><STRONG><a name="[142]"></a>video_motorHH_pulse_check</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, video.o(i.video_motorHH_pulse_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = video_motorHH_pulse_check &rArr; Send_connect_data_to_controller &rArr; Package_dataBufer
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_shut_start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_Dir_check
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorHH_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Video_loop_check
</UL>

<P><STRONG><a name="[a9]"></a>vidoe_mode_para_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, video.o(i.vidoe_mode_para_clear))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[a1]"></a>wideAngle_Get_data_from_controller</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, wide_angle.o(i.wideAngle_Get_data_from_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wideAngle_Get_data_from_controller &rArr; wide_get_countdown_time &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wide_mode_para_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wide_get_countdown_time
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_mode_param_display
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_connect_data_to_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
</UL>

<P><STRONG><a name="[172]"></a>wide_get_countdown_time</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, wide_angle.o(i.wide_get_countdown_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wide_get_countdown_time &rArr; PULSE_SUM &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_calculat
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_fast_speed_and_ramp_time
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_SUM
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wideAngle_Get_data_from_controller
</UL>

<P><STRONG><a name="[171]"></a>wide_mode_para_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wide_angle.o(i.wide_mode_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wideAngle_Get_data_from_controller
</UL>

<P><STRONG><a name="[163]"></a>wifi24G_data_Dispose</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf24l01.o(i.wifi24G_data_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wifi24G_data_Dispose &rArr; wifi24G_read_data &rArr; Get_data_from_controller &rArr; Set_origin_OK &rArr; Video_abPoint_set &rArr; Video_speed_calculate &rArr; MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_send_data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>wifi24G_read_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rf24l01.o(i.wifi24G_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wifi24G_read_data &rArr; Get_data_from_controller &rArr; Set_origin_OK &rArr; Video_abPoint_set &rArr; Video_speed_calculate &rArr; MotorVV_Video_move_time_check &rArr; MotorVV_Video_compensation_check &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_verify
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_data_Dispose
</UL>

<P><STRONG><a name="[173]"></a>wifi24G_send_data</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, rf24l01.o(i.wifi24G_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wifi24G_send_data &rArr; Nrf24L01_init &rArr; NRF24L01_check &rArr; NRF24L01_Write_Buf &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf24L01_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF24L01_Set_Mode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi24G_data_Dispose
</UL>

<P><STRONG><a name="[ef]"></a>wifi_sleep</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf24l01.o(i.wifi_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wifi_sleep &rArr; NRF24L01_Write_Reg &rArr; drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutDown
</UL>

<P><STRONG><a name="[155]"></a>write_bootTag</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, flash.o(i.write_bootTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = write_bootTag &rArr; write_flash_holfword_buffer &rArr; write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_checksum
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_bootloader
</UL>

<P><STRONG><a name="[5b]"></a>write_flash_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flash.o(i.write_flash_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = write_flash_active &rArr; write_flash_holfword_buffer &rArr; write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_code_value
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_data_from_controller
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Specialty_Get_data_from_controller
</UL>

<P><STRONG><a name="[178]"></a>write_flash_holfword</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, flash.o(i.write_flash_holfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword_buffer
</UL>

<P><STRONG><a name="[177]"></a>write_flash_holfword_buffer</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, flash.o(i.write_flash_holfword_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = write_flash_holfword_buffer &rArr; write_flash_holfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_IWDG
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_holfword
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_active
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bootTag
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15d]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c3]"></a>LL_TIM_OC_EnablePreload</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, main.o(i.LL_TIM_OC_EnablePreload))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[bf]"></a>MX_TIM3_Init</STRONG> (Thumb, 184 bytes, Stack size 104 bytes, main.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM3_Init &rArr; LL_TIM_OC_Init &rArr; OC4Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[129]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[86]"></a>LL_DMA_DisableChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_DisableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receiver
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[85]"></a>LL_DMA_DisableIT_TC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_DisableIT_TC))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Dma_SendIRQ_Dispose
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_SendIRQ_Dispose
</UL>

<P><STRONG><a name="[10f]"></a>LL_DMA_EnableChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[10e]"></a>LL_DMA_EnableIT_TC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_EnableIT_TC))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
</UL>

<P><STRONG><a name="[128]"></a>LL_DMA_GetDataLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_GetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receiver
</UL>

<P><STRONG><a name="[12d]"></a>LL_DMA_SetChannelPriorityLevel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetChannelPriorityLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[10d]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_SetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart22_Recdata_Handling
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Printf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[12c]"></a>LL_DMA_SetDataTransferDirection</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetDataTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetDataTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[12b]"></a>LL_DMA_SetMemoryAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_SetMemoryAddress))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[12f]"></a>LL_DMA_SetMemoryIncMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetMemoryIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemoryIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[131]"></a>LL_DMA_SetMemorySize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetMemorySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemorySize
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[132]"></a>LL_DMA_SetMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[12a]"></a>LL_DMA_SetPeriphAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.LL_DMA_SetPeriphAddress))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[12e]"></a>LL_DMA_SetPeriphIncMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetPeriphIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[130]"></a>LL_DMA_SetPeriphSize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.LL_DMA_SetPeriphSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphSize
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Receiver_Dma_Init
</UL>

<P><STRONG><a name="[134]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
</UL>

<P><STRONG><a name="[133]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart22_Send_Dma_Init
</UL>

<P><STRONG><a name="[c6]"></a>Usart22_Receiver_Dma_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, uart.o(i.Usart22_Receiver_Dma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart22_Receiver_Dma_Init &rArr; LL_DMA_SetPeriphSize
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[c7]"></a>Usart22_Send_Dma_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, uart.o(i.Usart22_Send_Dma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usart22_Send_Dma_Init &rArr; LL_DMA_SetPeriphSize
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[16c]"></a>LL_EXTI_EnableFallingTrig_0_31</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.LL_EXTI_EnableFallingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrKey_exti_interrupt
</UL>

<P><STRONG><a name="[16b]"></a>LL_EXTI_EnableIT_0_31</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.LL_EXTI_EnableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrKey_exti_interrupt
</UL>

<P><STRONG><a name="[16a]"></a>LL_SYSCFG_SetEXTISource</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.LL_SYSCFG_SetEXTISource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SYSCFG_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrKey_exti_interrupt
</UL>

<P><STRONG><a name="[16e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrKey_exti_interrupt
</UL>

<P><STRONG><a name="[16d]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrKey_exti_interrupt
</UL>

<P><STRONG><a name="[22]"></a>Algorithm_0</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, uid_encryption.o(i.Algorithm_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Algorithm_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uid_encryption.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>Algorithm_1</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, uid_encryption.o(i.Algorithm_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Algorithm_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uid_encryption.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>Algorithm_2</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, uid_encryption.o(i.Algorithm_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Algorithm_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uid_encryption.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>Algorithm_3</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, uid_encryption.o(i.Algorithm_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Algorithm_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uid_encryption.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>Algorithm_4</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, uid_encryption.o(i.Algorithm_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Algorithm_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uid_encryption.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf24l01.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
</UL>

<P><STRONG><a name="[154]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, low_power.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
</UL>

<P><STRONG><a name="[bb]"></a>OC1Config</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, stm32f0xx_ll_tim.o(i.OC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[bc]"></a>OC2Config</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f0xx_ll_tim.o(i.OC2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC2Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[bd]"></a>OC3Config</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f0xx_ll_tim.o(i.OC3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC3Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[ba]"></a>OC4Config</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f0xx_ll_tim.o(i.OC4Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC4Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
